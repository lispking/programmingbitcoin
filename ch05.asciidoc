[[chapter_tx_parsing]]

== Transactions 交易

[.lead]
Transactions((("transactions", "overview of", id="Tover05"))) are at the heart of Bitcoin.
Transactions, simply put, are value transfers from one entity to another.
We'll see in <<chapter_script>> how "entities" in this case are really smart contracts—but we're getting ahead of ourselves.
Let's first look at what transactions in Bitcoin are, what they look like, and how they are parsed.

交易是比特币的核心。 
简单来说，交易就是一个实体向另一个实体转移价值。 
我们将在<<script 章节>>中看到，在这种情况下，“实体”实际上是智能合约 —— 但我们有点提前了。 
首先，让我们看看比特币中的交易是什么，它们长什么样子，以及如何解析它们。

=== Transaction Components 交易组件

At a high level, a transaction really only has four components.
They are:

在高级别上，一个交易实际上只有四个组件。 
它们是：

1. Version 版本
2. Inputs 输入
3. Outputs 输出
4. Locktime 锁定期

A general overview of these fields might be helpful.
The version indicates what additional features the transaction uses, inputs define what bitcoins are being spent, outputs define where the bitcoins are going, and locktime defines when this transaction starts being valid.
We'll go through each component in depth.

对这些字段做一个概括性的了解可能有所帮助。 
版本表示交易使用哪些附加功能，输入定义了正在消费的比特币，输出定义了比特币的去向，而锁定期定义了这笔交易何时开始生效。 
我们将深入讨论每个组件。

<<transaction_components_version_inputs_output_locktime>> shows a hexadecimal dump of a typical transaction that shows which parts are which.

<<transaction_components_version_inputs_output_locktime>> 显示了一个典型交易的十六进制转储，显示了各个部分是哪个。

[[transaction_components_version_inputs_output_locktime]]
.Transaction components: version, inputs, outputs, and locktime 交易组件：版本、输入、输出和锁定期
image::images/prbc_0501.png[Transaction Version Inputs Outputs and Locktime]

The differently highlighted parts represent the version, inputs, outputs, and locktime, respectively.

不同高亮的部分分别代表版本、输入、输出和锁定期。

With this in mind, we can start constructing the((("transactions", "creating transaction class (Tx)"))) transaction class, which we'll call `Tx`:

有了这个概念，我们可以开始构建(((“transactions”, “创建交易类 (Tx)”)))交易类，我们将称之为 `Tx`：

[source,python]
----
include::code-ch05/tx.py[tag=source1]
----
<1> Input and output are very generic terms, so we specify what kind of inputs they are.
We'll define the specific object types later. 输入和输出是非常通用的术语，因此我们需要指定它们是哪种输入。 我们稍后会定义具体对象类型。 
<2> We need to know which network this transaction is on to be able to validate it fully. 我们需要知道这笔交易在哪个网络上，才能完全验证它。 
<3> The `id` is what block explorers((("block explorers"))) use for looking up transactions.
It's the hash256 of the transaction in hexadecimal format. `id` 是区块探索器用来查找交易的标识符。 它是交易在十六进制格式中的 hash256。
<4> The hash is the hash256 of the serialization in little-endian.
Note we don't have the `serialize` method yet; so until we do, this won't work. hash 是序列化在小端序中的 hash256。 请注意，我们还没有 `serialize` 方法；所以，在实现该方法之前，这段代码不会运行。

The rest of this chapter will be concerned with parsing transactions.
We could, at this point, write code like this:

本章的其余部分将关注解析交易。 
在这个阶段，我们可以编写如下代码：

[source,python]
----
class Tx:
    ...

    @classmethod  # <1>
    def parse(cls, serialization):
        version = serialization[0:4]  # <2>
	...
----
<1> This method has to be a class method as the serialization will return a new instance of a `Tx` object. 由于序列化将返回一个 `Tx` 对象的新实例，所以此方法必须是类方法。
<2> We assume here that the variable `serialization` is a byte array. 我们在这里假设变量 `serialization` 是一个字节数组。

This could definitely work, but the transaction may be very large.
Ideally, we want to be able to parse from a _stream_ instead.
This will allow us to not need the entire serialized transaction before we start parsing, and that allows us to fail early and be more efficient.
Thus, the code for parsing a transaction will look more like this:

这种方法确实可以工作，但是交易可能非常大。 
理想情况下，我们希望能够从一个 流 中解析而不是整个序列化交易。 
这将允许我们在开始解析之前不需要整个序列化交易，从而可以更早地失败并提高效率。 
因此，解析交易的代码将更像这样：

[source,python]
----
class Tx:
    ...

    @classmethod
    def parse(cls, stream):
        serialized_version = stream.read(4)  # <1>
	...
----
<1> The `read` method will allow us to parse on the fly as we won't have to wait on I/O. read 方法将允许我们边解析边进行，因为我们不需要等待 I/O。

This is advantageous from an engineering perspective as the stream can be a socket connection on the network or a file handle.
We can start parsing the stream right away instead of waiting for the whole thing to be transmitted or read first.
Our method will be able to handle any sort of stream and return the `Tx` object that we need.((("", startref="Tover05")))

从工程角度来看，这是有利的，因为流可以是网络上的套接字连接或文件句柄。 
我们可以立即开始解析流，而不是等待整个传输或读取。
我们的方法将能够处理任何类型的流，并返回我们需要的 `Tx` 对象。

=== Version 版本

When((("transactions", "version component")))((("version numbers", "of transactions"))) you see a version number in something (<<version_chap_five>> shows an example), it's meant to give the receiver information about what the versioned thing is supposed to represent.
If, for example, you are running Windows 3.1, that's a version number that's very different than Windows 8 or Windows 10.
You could specify just "Windows," but specifying the version number after the operating system helps you know what features it has and what APIs you can program against.

当你在一个事物中看到一个版本号时（<<version_chap_five>> 显示了一个示例），这意味着给接收者关于版本化事物应该代表的信息。 
例如，如果你正在运行 Windows 3.1，那么这个版本号与 Windows 8 或 Windows 10 有很大的不同。 
你可以说“Windows”，但是指定操作系统的版本号可以帮助你知道它具有哪些功能以及你可以针对哪些 API 进行编程。

[[version_chap_five]]
.Version
image::images/prbc_0502.png[Version]

Similarly, Bitcoin transactions have version numbers.
In Bitcoin's case, the transaction version is generally 1, but there are cases where it can be 2 (transactions((("OP_CHECKSEQUENCEVERIFY operation"))) using an opcode called `OP_CHECKSEQUENCEVERIFY` as defined in((("BIP (Bitcoin Improvement Proposals)", "BIP0112"))) BIP0112 require use of version > 1).

同样，比特币交易也有版本号。 
在比特币的情况下，交易版本通常为1，但也有版本为2的情况（使用名为 `OP_CHECKSEQUENCEVERIFY` 的操作码进行交易操作，如 BIP0112 中所定义）。

You may notice here that the actual value in hexadecimal is `01000000`, which doesn't look like 1.
Interpreted as a little-endian integer, however, this number is actually 1 (recall the discussion from <<chapter_serialization>>).

你可能注意到，这里的十六进制实际值为 `01000000`，看起来并不像1。 
然而，作为一个小端整数，这个数字实际上就是1（回顾一下<<chapter_serialization>>中的讨论）。


include::code-ch05/answers.py[tag=exercise1,indent=0]

=== Inputs 输入

Each((("transactions", "input component", id="Tinput05")))((("inputs", id="inputs05"))) input points to an output of a previous transaction (see <<inputs_chap_five>>).
This fact requires more explanation, as it's not intuitively obvious at first.

每个(((“transactions”, “input component”, id=“Tinput05”)))(((“inputs”, id=“inputs05”)))输入都指向一个先前交易的输出（见<<inputs_chap_five>>）。 
这个事实需要更多的解释，因为起初它并不是直观的。

[[inputs_chap_five]]
.Inputs
image::images/prbc_0503.png[Inputs]

Bitcoin's inputs are spending outputs of a previous transaction.
That is, you need to have received bitcoins first to spend something.
This makes intuitive sense.
You cannot spend money unless you've received money first.
The inputs refer to bitcoins that belong to you. Each input needs two things:

比特币的输入是先前交易的输出。 
也就是说，你需要先收到比特币才能消费。 
这是有道理的。 
除非你先收到钱，否则你不能花钱。 
输入指的是属于你的比特币。
每个输入需要两样东西：

* A reference to bitcoins you received previously 你之前收到的比特币的引用
* Proof that these are yours to spend 证明这些比特币是你可以消费的

The second part uses ECDSA (<<chapter_elliptic_curve_cryptography>>).
You don't want people to be able to forge this, so most inputs contain signatures that only the owner(s) of the private key(s) can produce.

第二部分使用 ECDSA (<<chapter_elliptic_curve_cryptography>>)。 
你不希望人们能够伪造这个，所以大多数输入都包含只有私钥所有者可以生成的签名。

The inputs field can contain more than one input.
This is analogous to using either a single $100 bill to pay for a $70 meal, or a $50 and a $20.
The former only requires one input ("bill"); the latter requires two.
There are situations where there could be even more inputs.
In our analogy, we could pay for a $70 meal with 14 $5 bills, or even 7,000 pennies.
This would be analogous to 14 inputs or 7,000 inputs.

输入字段可以包含多个输入。 
这类似于使用一张$100的钞票支付$70的餐费，或者使用一张$50和一张$20的钞票。 
前者只需要一个输入（“钞票”）；后者需要两个。 
有些情况下可能会有更多的输入。 
在我们的类比中，我们可以用14张$5的钞票支付$70的餐费，或者甚至用7,000个便士。 
这分别类似于14个输入或7,000个输入。

The number of inputs is the next part of the transaction, as highlighted in <<number_of_inputs>>.

输入的数量是交易的下一个部分，如<<number_of_inputs>>中突出显示的那样。

[[number_of_inputs]]
.Number of inputs
image::images/prbc_0504.png[Inputs]

We can see that the byte is actually `01`, which means that this transaction has one input.
It may be tempting here to assume that it's always a single byte, but it's not.
A single byte has 8 bits, so anything over 255 inputs will not be expressible in a single byte.

我们可以看到，这个字节实际上是 `01`，这意味着这笔交易有一个输入。 
在这里，我们可能会误以为它总是只有一个字节，但实际上并非如此。 
一个字节有8位，所以超过255个输入将无法用单个字节表示。

This((("variable integer (varint)"))) is where _varints_ come in.
Varint is shorthand for _variable integer_, which is a way to encode an integer into bytes that range from 0 to 2^64^ – 1.
We could, of course, always reserve 8 bytes for the number of inputs, but that would be a lot of wasted space if we expect the number of inputs to be relatively small (say, under 200).
This is the case with the number of inputs in a normal transaction, so using varints helps to save space.
You can see how they work in the following sidebar.

这就是 _varints_ 的用武之地。 
Varint 是 _variable integer_（可变整数）的缩写，它是一种将整数编码成字节的方法，这些字节的范围从0到2^64^-1。 
当然，我们总是可以为输入的数量保留8个字节，但如果预期的输入数量相对较小（例如，小于200），这将浪费很多空间。 
普通交易的输入数量就是这种情况，所以使用 varints 有助于节省空间。
你可以在下面的侧栏中了解它们是如何工作的。

[role="pagebreak-before less_space"]
.Varints
****
Variable integers work by these rules:

可变整数遵循以下规则：

* If the number is below 253, encode that number as a single byte (e.g., 100 -> `0x64`). 如果数字小于253，将这个数字编码为一个字节（例如，100 -> 0x64）。
* If the number is between 253 and 2^16^ – 1, start with the 253 byte (`fd`) and then encode the number in 2 bytes in little-endian (e.g., 255 -> `0xfdff00`, 555 -> `0xfd2b02`). 如果数字在253和2^16^-1之间，以253字节（fd）开头，然后将数字以2个小端字节编码（例如，255 -> 0xfdff00，555 -> 0xfd2b02）。
* If the number is between 2^16^ and 2^32^ – 1, start with the 254 byte (`fe`) and then encode the number in 4 bytes in little-endian (e.g., 70015 -> `0xfe7f110100`). 如果数字在2^16^和2^32^-1之间，以254字节（fe）开头，然后将数字以4个小端字节编码（例如，70015 -> 0xfe7f110100）。
* If the number is between 2^32^ and 2^64^ – 1, start with the 255 byte (`ff`) and then encode the number in 8 bytes in little-endian (e.g., 18005558675309 -> `0xff6dc7ed3e60100000`). 如果数字在2^32^和2^64^-1之间，以255字节（ff）开头，然后将数字以8个小端字节编码（例如，18005558675309 -> 0xff6dc7ed3e60100000）。

Two functions from _helper.py_ will be used to parse and serialize varint fields:

将使用 _helper.py_ 中的两个函数来解析和序列化varint字段：

[source,python]
----
include::code-ch05/helper.py[tag=source1]
----

`read_varint` will read from a stream and return the integer that was encoded.
`encode_varint` will do the opposite, which is to take an integer and return the varint byte representation.

read_varint 将从流中读取并返回已编码的整数。 
encode_varint 将执行相反的操作，即取一个整数并返回 varint 字节表示形式。
****

Each input contains four fields.
The first two fields point to the previous transaction output and the last two fields define how the previous transaction output can be spent.
The fields are as follows:

每个输入包含四个字段。 
前两个字段指向先前的交易输出，最后两个字段定义了如何花费先前的交易输出。
字段如下：

* Previous transaction ID 先前交易的 ID
* Previous transaction index 先前交易的索引
* ScriptSig
* Sequence 序列

As just explained, each input has a reference to a previous transaction's output.
The previous transaction ID is the hash256 of the previous transaction's contents.
This uniquely defines the previous transaction, as the probability of a hash collision is impossibly low.

正如刚刚解释过的，每个输入都有一个先前的交易输出的引用。 
先前交易的 ID 是先前交易内容的 hash256。 
这使得先前的交易具有唯一性，因为发生哈希碰撞的可能性极低。

As we'll see, each transaction has to have at least one output, but may have many.
Thus, we need to define exactly which output _within a transaction_ we're spending, which is captured in the previous transaction index.

正如我们将看到的，每个交易至少有一个输出，但可能有多个。 
因此，我们需要精确定义 在交易中 我们要花费的哪个输出，这在前一个交易索引中体现。

Note that the previous transaction ID is 32 bytes and that the previous transaction index is 4 bytes.
Both are in little-endian.

请注意，先前交易的 ID 为32字节，先前交易的索引为4字节。 
两者都是小端。

The ScriptSig((("ScriptSig field (inputs)"))) has to do with Bitcoin's smart contract language, Script, discussed more thoroughly in <<chapter_script>>.
For now, think of the ScriptSig as opening a locked box—something that can only be done by the owner of the transaction output.
The ScriptSig field is a variable-length field, not a fixed-length field like most of what we've seen so far.
A variable-length field requires us to define exactly how long the field will be, which is why the field is preceded by a varint telling us how long it is.

ScriptSig 与比特币的智能合约语言Script有关，Script在<<chapter_script>>中讨论得更详细。 
现在，将ScriptSig视为打开一个锁着的盒子，这是只有交易输出的所有者才能做到的。 
ScriptSig字段是可变长字段，而不是我们迄今为止所看到的固定长字段。 
可变长字段要求我们精确定义字段的确切长度，这就是为什么字段前有一个varint告诉我们它的长度。

The sequence((("high-frequency trades")))((("sequence field (inputs)"))) was originally intended as a way to do what Satoshi called "high-frequency trades" with the locktime field (see <<sequence_and_locktime>>), but is currently used with Replace-By-Fee (RBF) and `OP_CHECKSEQUENCEVERIFY`.
The sequence is also in little-endian and takes up 4 bytes.

序列最初是为了实现中本聪所说的“高频交易”而设计的，与锁定期字段（见<<sequence_and_locktime>>）有关，但目前用于 Replace-By-Fee (RBF) 和 OP_CHECKSEQUENCEVERIFY。 
序列也是小端，并占用4个字节。

The fields of the input look like <<the_fields_of_an_input_previous_tx_previous_index_scriptsig_and_sequence>>.

输入的字段看起来像<<the_fields_of_an_input_previous_tx_previous_index_scriptsig_and_sequence>>。

[[the_fields_of_an_input_previous_tx_previous_index_scriptsig_and_sequence]]
.The fields of an input: previous transaction ID, previous index, ScriptSig, and sequence
image::images/prbc_0505.png[Input Fields]

[[sequence_and_locktime]]
.Sequence and Locktime 序列和锁定期
****
Originally, Satoshi((("locktime"))) wanted the sequence and locktime fields to be used for something called "high-frequency trades."
What Satoshi envisioned was a way to do payments back and forth with another party without making lots of on-chain transactions.
For example, if Alice pays Bob _x_ bitcoins for something and then Bob pays Alice _y_ bitcoins for something else (say, if _x_ > _y_), then Alice can just pay Bob _x_ – _y_, instead of there being two separate transactions on-chain.
We could do the same thing if Alice and Bob had 100 transactions between them—that is, compress a bunch of transactions into a single transaction.

最初，中本聪（“锁定期”）希望序列和锁定期字段用于所谓的“高频交易”。 
中本聪设想了一种方法，可以在不进行大量链上交易的情况下，与另一方进行来回支付。 
例如，如果Alice支付Bob x 个比特币，然后Bob支付Alice y 个比特币（假设 x > y），那么Alice只需支付Bob x - y，而不是在链上有两个单独的交易。 
如果Alice和Bob之间有100笔交易，我们也可以这样做，即压缩多笔交易到一个单一交易中。

That's the idea that Satoshi had: a continuously updating mini-ledger between the two parties involved that gets settled on-chain.
Satoshi's intent was to use the sequence and locktime fields to update the high-frequency trade transaction every time a new payment between the two parties occurred.
The trade transaction would have two inputs (one from Alice and one from Bob) and two outputs (one to Alice and one to Bob).
The trade transaction would start with sequence at 0 and with a far-away locktime (say, 500 blocks from now, so valid in 500 blocks).
This would be the base transaction where Alice and Bob get the same amounts as they put in.

这就是中本聪的想法：在涉及的两个当事人之间不断更新的微型分类账，在链上结算。 
中本聪的意图是，每次两个当事人之间发生新的支付时，使用序列和锁定期字段更新高频交易交易。 
交易将有三个输入（一个来自Alice，一个来自Bob）和两个输出（一个给Alice，一个给Bob）。 
交易将从序列0开始，锁定期设置为一个遥远的值（比如500个区块之后，所以500个区块内有效）。 
这将是最基本的交易，Alice和Bob从中获得的金额与他们投入的金额相同。

After the first transaction, where Alice pays Bob _x_ bitcoins, the sequence of each input would be 1.
After the second transaction, where Bob pays Alice _y_ bitcoins, the sequence of each input would be 2.
Using this method, we could have lots of payments compressed into a single on-chain transaction as long as they happened before the locktime became valid.

在第一笔交易中，Alice支付Bob x 个比特币后，每个输入的序列将是1。 
在第二笔交易中，Bob支付Alice y 个比特币后，每个输入的序列将是2。 
使用这种方法，只要在锁定期有效之前发生，我们可以将多笔支付压缩到一个链上交易中。

Unfortunately, as clever as this is, it turns out that it's quite easy for a miner to cheat.
In our example, Bob could be a miner; he could ignore the updated trade transaction with sequence number 2 and mine the trade transaction with sequence number 1, cheating Alice out of _y_ bitcoins.

然而，尽管这个想法很聪明，但事实上，矿工作弊是很容易的。 
在我们的例子中，Bob可能是一个矿工；他可以忽略序列号为2的更新交易，而挖掘序列号为1的交易，从Alice那里骗走 y 个比特币。

A much better design was created later with "payment channels," which is the basis for the Lightning Network.

后来，人们设计了一种更好的方案，即“支付通道”，这是闪电网络的基础。
****

[role="pagebreak-before"]
Now that we know what the fields are, we can start creating a `TxIn` class in Python:

现在我们已经知道了这些字段，我们可以开始在Python中创建一个TxIn类：

[source,python]
----
include::code-ch05/tx.py[tag=source2]
----
<1> We default to an empty ScriptSig. 我们默认ScriptSig为空。

There are a couple things to note here.
First, the amount of each input is not specified.
We have no idea how much is being spent unless we look it up in the blockchain for the transaction(s) that we're spending.
Furthermore, we don't even know if the transaction is unlocking the right box, so to speak, without knowing about the previous transaction.
Every node must verify that this transaction unlocks the right box and that it doesn't spend nonexistent bitcoins.
How we do that is further discussed in <<chapter_tx>>.

在这里需要注意的是几点。 
首先，每个输入的金额没有指定。 
除非我们在区块链中查找我们正在花费的交易，否则我们无法知道正在花费的金额。 
此外，如果我们不知道关于前一个交易的信息，我们甚至不知道这笔交易是否解锁了正确的盒子。 
每个节点都必须验证此交易是否解锁了正确的盒子，以及它是否花费了不存在的比特币。 
我们如何在<<chapter_tx>>中进一步讨论这个问题。

==== Parsing Script 解析脚本

We'll((("Script", "creating Script objects"))) delve more deeply into how Script is parsed in <<chapter_script>>, but for now, here's how you get a `Script` object from hexadecimal in Python:

我们将在<<chapter_script>>中更深入地探讨如何解析脚本，但现在，这是你在Python中从十六进制获取Script对象的的方法：

----
include::code-ch05/examples.py[tag=example1]
----
<1> The `Script` class will be more thoroughly explored in <<chapter_script>>.
For now, please trust that the `Script.parse` method will create the object that we need.((("", startref="Tinput05")))((("", startref="inputs05")))
Script类将在<<chapter_script>>中更详细地探讨。 现在，请相信Script.parse方法将创建我们所需要的对象。

include::code-ch05/answers.py[tag=exercise2,indent=0]

=== Outputs 输出

As((("transactions", "output component")))((("outputs"))) hinted in the previous section, outputs define where the bitcoins are going.
Each transaction must have one or more outputs.
Why would anyone have more than one output?
An exchange may batch transactions, for example, and pay out to a lot of people at once instead of generating a single transaction for every single person that requests bitcoins.

正如上一节所暗示的，输出定义了比特币的去向。 
每个交易必须有一个或多个输出。 
为什么有人会有一个以上的输出？ 
例如，交易所可能会批量处理交易，一次性向很多人支付，而不是为每个要求比特币的人生成一个单独的交易。

Like with inputs, output serialization starts with how many outputs there are as a varint, as shown in <<number_of_outputs>>.

与输入一样，输出序列化从输出的数量开始，如下所示<<number_of_outputs>>。

[[number_of_outputs]]
.Number of outputs
image::images/prbc_0506.png[Outputs]

Each((("amount field (outputs)")))((("ScriptPubKey field (outputs)"))) output has two fields: amount and ScriptPubKey.
The amount is the amount of bitcoins being assigned and is specified in satoshis, or 1/100,000,000ths of a bitcoin.
This allows us to divide bitcoins very finely, down to 1/300th of a penny in USD terms as of this writing.
The absolute maximum for the amount is the asymptotic limit of 21 million bitcoins in satoshis, which is 2,100,000,000,000,000 (2,100 trillion) satoshis.
This number is greater than 2^32^ (4.3 billion or so) and is thus stored in 64 bits, or 8 bytes.
The amount is serialized in little-endian.

每个输出有两个字段：金额和ScriptPubKey。 
金额是指定的比特币数量，以聪为单位，或比特币的1/100,000,000分之一。 
这使得我们可以非常精细地分割比特币，以1/300分之一的美元计算，截至撰写本文时。 
金额的最大值是21万比特币的渐近极限，即2,100,000,000,000,000（2,100万亿）聪。 
这个数字大于2^32^（约43亿）因此，它以64位或8字节存储。 金额以小端序列化。

The ScriptPubKey, like the ScriptSig, has to do with Bitcoin's smart contract language, Script.
Think of the ScriptPubKey as the locked box that can only be opened by the holder of the key.
It's like a one-way safe that can receive deposits from anyone, but can only be opened by the owner of the safe.
We'll explore this in more detail in <<chapter_script>>.
Like ScriptSig, ScriptPubKey is a variable-length field and is preceded by the length of the field in a varint.

ScriptPubKey，与ScriptSig一样，与比特币的智能合约语言Script有关。 
将ScriptPubKey视为只能由密钥持有者打开的锁盒。 
它像一个单向保险箱，可以接收任何人的存款，但只能由保险箱的主人打开。 
我们将在<<chapter_script>>中更详细地探讨此目标。 
与ScriptSig一样，ScriptPubKey是可变长字段，字段前有一个varint表示字段长度。

A complete output looks like <<output_fields_amount_and_scriptpubkey_this_one_is_at_index_0>>.

一个完整的输出看起来像<<output_fields_amount_and_scriptpubkey_this_one_is_at_index_0>>。

[[output_fields_amount_and_scriptpubkey_this_one_is_at_index_0]]
.A complete output field, showing the amount and ScriptPubKey—this one is at index 0 完整的输出字段，显示金额和ScriptPubKey - 此目标位于索引0
image::images/prbc_0507.png[Output Fields]

.UTXO Set UTXO 集
****
UTXO((("UTXO (unspent transaction output) Set"))) stands for _unspent transaction output_.
The entire set of unspent transaction outputs at any given moment is called the _UTXO set_.
The reason why UTXOs are important is because at any moment in time, they represent all the bitcoins that are available to be spent.
In other words, these are the bitcoins that are in circulation.
Full nodes on the network must keep track of the UTXO set, and keeping the UTXO set indexed makes validating new transactions much faster.

UTXO 代表未花费的交易输出。 
在任何给定时刻，整个未花费交易输出集被称为UTXO集。 
UTXO之所以重要，是因为在任何时刻，它们都代表了所有可用的比特币。 
换句话说，这些是在流通中的比特币。 
网络上的完整节点必须跟踪UTXO集，并索引UTXO集可以使验证新交易更快。

For example, it's easy to enforce a no-double-spending rule by looking up the previous transaction output in the UTXO set.
If the input of a new transaction is using a transaction output that's not in the UTXO set, that's an attempt at a double-spend or a nonexistent output and thus invalid.
Keeping the UTXO set handy is also very useful for validating transactions.
As we'll see in <<chapter_script>>, we need to look up the amount and ScriptPubKey from the previous transaction output to validate transactions, so having these UTXOs handy can speed up transaction validation.

例如，通过在UTXO集中查找前一个交易输出，可以轻松执行不允许双重支付规则。 
如果新交易的输入使用了不在UTXO集中的交易输出，则这是尝试双重支付或不存在输出，因此无效。 
在验证交易时，将UTXO集放在附近也非常有用。 
如我们在<<chapter_script>>中所看到的，我们需要查看前一个交易输出的金额和ScriptPubKey来验证交易，因此这些UTXO非常有用，可以加快交易验证的速度。
****

We can now start coding the `TxOut` class:

我们现在可以开始编写TxOut类：

[source,python]
----
include::code-ch05/tx.py[tag=source3]
----

include::code-ch05/answers.py[tag=exercise3,indent=0]

=== Locktime 锁定期

Locktime((("locktime")))((("transactions", "locktime component")))((("high-frequency trades"))) is a way to time-delay a transaction.
A transaction with a locktime of 600,000 cannot go into the blockchain until block 600,001.
This was originally construed as a way to do high-frequency trades (see <<sequence_and_locktime>>), which turned out to be insecure.
If the locktime is greater than or equal to 500,000,000, it's a Unix timestamp.
If it's less than 500,000,000, it's a block number.
This way, transactions can be signed but unspendable until a certain point in Unix time or block height is reached.

锁定期是一种延迟交易的方法。 
具有600,000锁定期的事务不能在区块达到600,001之前进入区块链。 
这最初被认为是进行高频交易的一种方法（请参见<<sequence_and_locktime>>），但事实证明这是不安全的。 
如果锁定期大于或等于500,000,000，则是一个Unix时间戳。 
如果它小于500,000,000，则是一个区块编号。 
通过这种方式，交易可以被签名但在达到Unix时间或区块高度的某个点之前不能花费。

.When Locktime Is Ignored 忽略锁定期的情况
[WARNING]
====
Note that locktime is ignored if the sequence numbers for every input are `ffffffff`.

请注意，如果每个输入的序列号都是 `ffffffff`，则忽略锁定期。
====

The serialization is in little-endian and 4 bytes (<<locktime>>).

序列化采用小端格式，占用4个字节（<<locktime>>）。

[[locktime]]
.Locktime 锁定期
image::images/prbc_0508.png[Locktime]

The main problem with using locktime is that the recipient of the transaction has no certainty that the transaction will be good when the locktime comes.
This is similar to a postdated bank check, which has the possibility of bouncing.
The sender can spend the inputs prior to the locktime transaction getting into the blockchain, thus invalidating the transaction at locktime.

使用锁定期的主要问题是，交易接收者无法确定在锁定期到来时交易是否有效。 
这类似于一张可能被退票的日期晚于当前日期的银行支票。
发送者可以在锁定期交易进入区块链之前花费输入，从而在锁定期使交易无效。

The((("BIP (Bitcoin Improvement Proposals)", "BIP0065"))) uses before BIP0065 were limited.
BIP0065((("OP_CHECKLOCKTIMEVERIFY operation"))) introduced `OP_CHECKLOCKTIMEVERIFY`, which makes locktime more useful by making an output unspendable until a certain locktime.

在 BIP0065 之前，使用锁定期的交易受到限制。 
BIP0065 引入了 OP_CHECKLOCKTIMEVERIFY，使锁定期更有用，因为它使输出在达到特定锁定期之前无法花费。

include::code-ch05/answers.py[tag=exercise4,indent=0]

include::code-ch05/answers.py[tag=exercise5,indent=0]

=== Coding Transactions 编写交易

We've((("transactions", "coding transactions"))) parsed the transaction; now we want to do the opposite, which is serializing the transaction.
Let's start with `TxOut`:

我们已经解析了交易；现在我们想要做相反的操作，即序列化交易。 
让我们从TxOut开始：

[source,python]
----
class TxOut:
...
include::code-ch05/tx.py[tag=source4]
----
<1> We're going to serialize the +TxOut+ object to a bunch of bytes. 我们要将 +TxOut+ 对象序列化为一系列字节。

We can then proceed to `TxIn`:

然后我们可以继续处理 `TxIn`：

[source,python]
----
class TxIn:
...
include::code-ch05/tx.py[tag=source5]
----

Lastly, we can serialize `Tx`:

最后，我们可以序列化 `Tx`：

[source,python]
----
class Tx:
...
include::code-ch05/tx.py[tag=source6]
----

We've used the `serialize` methods of both `TxIn` and `TxOut` to serialize `Tx`.

我们已经使用了TxIn和TxOut的serialize方法来序列化Tx。

Note that the transaction fee is not specified anywhere!
This is because the fee is an implied amount, as described in the next section.

请注意，交易费用在任何地方都没有指定！ 
这是因为费用是一个隐含的金额，如下一节所述。

=== Transaction Fee 交易费用

One((("transactions", "transaction fees"))) of the consensus rules of Bitcoin is that for any non-coinbase transactions (more on coinbase transactions in <<chapter_blocks>>), the sum of the inputs has to be greater than or equal to the sum of the outputs.
You may be wondering why the inputs and outputs can't just be forced to be equal.
This is because if every transaction had zero cost, there wouldn't be any incentive for miners to include transactions in blocks (see <<chapter_blocks>>).
Fees((("mempool transactions"))) are a way to incentivize miners to include transactions.
Transactions not in blocks (so-called _mempool transactions_) are not part of the blockchain and are not final.

比特币的一个共识规则是，对于任何非coinbase交易（关于coinbase交易在<<chapter_blocks>>中有更多介绍），输入的总和必须大于或等于输出的总和。 
您可能会好奇为什么输入和输出不能简单地强制相等。 
这是因为如果每笔交易的成本都为零，那么矿工就没有任何动力将交易包含在区块中（请参见<<chapter_blocks>>）。 
费用是一种激励矿工包含交易的方式。 
不在区块中的交易（所谓的 _mempool交易_ ）不属于区块链，因此不是最终的。

The transaction fee is simply the sum of the inputs minus the sum of the outputs.
This difference is what the miner gets to keep.
As inputs don't have an amount field, we have to look up the amount.
This requires access to the blockchain, specifically the UTXO set.
If you are not running a full node, this can be tricky, as you now need to trust some other entity to provide you with this information.

交易费用简单地等于输入的总和减去输出的总和。 
这个差额就是矿工所得到的。 
由于输入没有金额字段，我们必须查找金额。 
这需要访问区块链，特别是UTXO集。 
如果您没有运行完整节点，这可能会有点棘手，因为您现在需要信任其他实体为您提供此信息。

We((("TxFetcher class"))) are creating a new class to handle this, called `TxFetcher`:

我们创建了一个名为TxFetcher的新类来处理此问题：

[source,python]
----
include::code-ch05/tx.py[tag=source7]
----
<1> We check that the ID is what we expect it to be. 我们检查ID是否是我们期望的。

You may be wondering why we don't get just the specific output for the transaction and instead get the entire transaction.
This is because we don't want to be trusting a third party!
By getting the entire transaction, we can verify the transaction ID (the hash256 of its contents) and be sure that we are indeed getting the transaction we asked for.
This is impossible unless we receive the entire transaction.

您可能会好奇为什么我们不只获取交易的特定输出，而是获取整个交易。 
这是因为我们不希望信任第三方！ 
通过获取整个交易，我们可以验证交易ID（其内容的hash256）并确保我们确实获得了我们要求的交易。 
除非我们收到整个交易，否则这是不可能的。

.Why We Minimize Trusting Third Parties 为什么我们要尽量减少信任第三方
[WARNING]
====
As((("third parties, minimizing risk of")))((("trusted third parties"))) Nick Szabo eloquently wrote in his seminal essay https://nakamotoinstitute.org/trusted-third-parties/["Trusted Third Parties are Security Holes"], trusting third parties to provide correct data is _not_ a good security practice.
The third party may be behaving well now, but you never know when it may get hacked, have an employee go rogue, or start implementing policies that are against your interests.
Part of what makes Bitcoin secure is _not_ trusting, but verifying the data that we're given.

正如尼克·萨博（Nick Szabo）在他著名的论文 https://nakamotoinstitute.org/trusted-third-parties/[“信任的第三方是安全漏洞”]中精辟地写道，依赖第三方提供正确数据并不是一个好的安全实践。 
第三方现在可能表现得很好，但您永远不知道它可能何时被黑客攻击、员工叛变或开始实施反对您利益的策略。
比特币安全的一部分在于不信任，而验证我们所获得的数据。
====

We can now create the appropriate method in `TxIn` to fetch the previous transaction and methods to get the previous transaction output's amount and ScriptPubKey (the latter to be used in <<chapter_script>>):

我们可以在TxIn中创建适当的方法来获取前一个交易，以及获取前一个交易输出金额和ScriptPubKey的方法（后者将在<<chapter_script>>中使用）：

[source,python]
----
class TxIn:
...
include::code-ch05/tx.py[tag=source8]
----

==== Calculating the Fee 计算费用

Now that we have the `value` method in `TxIn` that lets us access how many bitcoins are in each transaction input, we can calculate the fee for a transaction.

现在我们在TxIn中有了value方法，可以访问每个交易输入中的比特币数量，我们可以计算交易的费用。

include::code-ch05/answers.py[tag=exercise6,indent=0]

=== Conclusion 结论

We've covered exactly how to parse and serialize transactions and defined what the fields mean.
There are two fields that require more explanation, both related to Bitcoin's smart contract language, Script.
To that topic we go in <<chapter_script>>.

我们已经介绍了如何解析和序列化交易，以及定义了字段的含义。 
有两个字段需要更详细的解释，它们都与比特币的智能合约语言Script有关。 
我们将在<<chapter_script>>中讨论这个主题。
