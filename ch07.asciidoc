[[chapter_tx]]

== Transaction Creation and Validation 交易创建与验证

[.lead]
One of the trickiest things to code in Bitcoin is validating transactions.
Another one is creating transactions.
In this chapter, we'll cover the exact steps to do both.
Toward the end of the chapter, we'll be creating a testnet transaction and broadcasting it.

在比特币中，编码最棘手的事情之一就是验证交易。 另一个就是创建交易。 在本章中，我们将介绍如何进行这两项操作。 在章节的末尾，我们将创建一个测试网交易并将其广播出去。

=== Validating Transactions 验证交易

Every((("transactions", "validating", id="Tvalid07"))) node, when receiving transactions, makes sure that each transaction adheres to the network rules.
This process is called _transaction validation_.
Here are the main things that a node checks:

每个节点在接收到交易时，都会确保每笔交易遵守网络规则。 这个过程被称为 _交易验证_。 以下是节点检查的主要内容：

1. The inputs of the transaction are previously unspent. 交易的输入是之前未花费的。
2. The sum of the inputs is greater than or equal to the sum of the outputs. 输入的总和大于或等于输出的总和。
3. The ScriptSig successfully unlocks the previous ScriptPubKey. ScriptSig成功解锁了之前的ScriptPubKey。

#1 prevents double-spending.
Any input that's been spent (that is, included in the blockchain) cannot be spent again. 防止双重花费。 任何已经被花费的输入（即包含在区块链中的）都不能再次花费。

#2 makes sure no new bitcoins are created (except in a special type of transaction called a coinbase transaction; more on that in <<chapter_blocks>>). 确保没有新的比特币被创建（除了在一种特殊类型的交易中，比如coinbase交易；关于这个在<<块章节>>中会有更多的介绍）。

#3 makes sure that the combined script is valid.
In the vast majority of transactions, this means checking that the one or more signatures in the ScriptSig are valid. 确保组合脚本有效。 在绝大多数交易中，这意味着检查ScriptSig中的一个或多个签名是否有效。

Let's look at how each condition is checked.

让我们看看每个条件的检查方式。

[role="pagebreak-before"]
==== Checking the Spentness of Inputs 检查输入的花费情况

To((("inputs")))((("double-spending, preventing"))) prevent double-spending, a node checks that each input exists and has not been spent.
This can be checked by any full node by looking at the UTXO set (see <<chapter_tx_parsing>>).
We cannot determine from the transaction itself whether it's double-spending, much like we cannot look at a personal check and determine whether it's overdrafting.
The only way to know is to have access to the UTXO set, which requires calculation from the entire set of transactions.

为了防止双重花费，节点会检查每个输入是否存在且未被花费。 任何完整节点都可以通过查看UTXO集合（见<<章节_tx_parsing>>）来检查此目标。 从交易本身我们无法确定它是否是双重花费，这就像我们无法通过查看个人支票来确定它是否透支一样。 唯一的方法是访问UTXO集合，这需要从整个交易集合中进行计算。

In Bitcoin, we can determine whether an input is being double-spent by keeping track of the UTXOs.
If an input is in the UTXO set, that transaction input both exists and is _not_ double-spending.
If the transaction passes the rest of the validity tests, then we remove all the inputs of the transaction from the UTXO set.
Light clients that do not have access to the blockchain have to trust other nodes for a lot of the information, including whether an input has already been spent.

在比特币中，我们可以通过跟踪UTXOs来确定输入是否被双重花费。 如果输入在UTXO集合中，那么该交易输入既存在，也不是双重花费。 如果交易通过了其余的有效性测试，那么我们将从UTXO集合中删除所有交易的输入。 没有访问区块链的轻客户端必须信任其他节点提供许多信息，包括输入是否已经被花费。

A full node can check the spentness of an input pretty easily, but a light client has to get this information from someone else.

完整节点可以很容易地检查输入的花费情况，但是轻客户端必须从其他人那里获取此信息。

==== Checking the Sum of the Inputs Versus the Sum of the Outputs 检查输入总和与输出总和

Nodes((("outputs"))) also make sure that the sum of the inputs is greater than or equal to the sum of the outputs.
This ensures that the transaction does not create new coins.
The one exception is a coinbase transaction, which we'll study more in <<chapter_blocks>>.
Since inputs don't have an amount field, this must be looked up on the blockchain.
Once again, full nodes have access to the amounts associated with the unspent output, but light clients have to depend on full nodes to supply this information.

节点还会确保输入的总和大于或等于输出的总和。 这确保了交易不会创建新硬币。 唯一的例外是coinbase交易，我们将在<<块章节>>中对其进行更深入的研究。 由于输入没有金额字段，因此必须从区块链上查找。 再次，完整节点可以访问与未花费输出相关的金额，但是轻客户端必须依赖完整节点提供此信息。

We covered how to calculate fees in <<chapter_tx_parsing>>.
Checking that the sum of the inputs is greater than or equal to the sum of the outputs is the same as checking that the fee is not negative (that is, creating money).
Recall the last exercise in <<chapter_tx_parsing>>.
The method `fee` looks like this:

我们在<<章节_tx_parsing>>中介绍了如何计算费用。 检查输入总和是否大于或等于输出总和与检查费用是否为负（即创建货币）是相同的。 回想一下<<章节_tx_parsing>>中的最后一个练习。 fee方法看起来像这样：

[source,python]
----
class Tx:
    ...
include::code-ch07/tx.py[tag=source1]
----

We can test to see if this transaction is trying to create money by using this method:

我们可以通过以下方法测试此交易是否试图创建货币：

[source,python]
----
include::code-ch07/examples.py[tag=example1]
----
<1> This only works because we're using Python (see <<valueOverflow>>). 这只是因为我们在使用Python（请参见<<valueOverflow>>）。

If the fee is negative, we know that the `output_sum` is greater than the `input_sum`, which is another way of saying that this transaction is trying to create bitcoins out of the ether.

如果费用为负，我们知道output_sum大于input_sum，这是另一种说法，即此交易试图从以太中创造比特币。

[[valueOverflow]]
[NOTE]
.The Value Overflow Incident 值溢出事件
====
Back((("value overflow incident"))) in 2010, there was a transaction that created 184 billion new bitcoins.
This was due to the fact that in C++, the amount field is a _signed_ integer and not an _unsigned_ integer.
That is, the value could be negative!

回顾((("value overflow incident")))2010年，有一笔交易创造了1840亿个新比特币。 这是因为C++中的金额字段是有符号整数而不是无符号整数。 也就是说，该值可能是负的！

The clever transaction passed all the checks, including the one for not creating new bitcoins, but only because the output amounts overflowed past the maximum number.
2^64^ is ~1.84 &#215; 10^19^ satoshis, which is 184 billion bitcoins.
The fee was negative by enough that the C++ code was tricked into believing that the fee was actually positive by 0.1 BTC!

这笔聪明的交易通过了所有的检查，包括创建新比特币的检查，但这只是因为输出金额超过了最大数值。 2^64^约为1.84 * 10^19^ satoshis，这是1840亿比特币。 费用足够负，以至于C++代码被欺骗，认为费用实际上是正的，为0.1 BTC！

The vulnerability is detailed in CVE-2010-5139 and was patched via a soft fork in Bitcoin Core 0.3.11.
The transaction and the extra bitcoins it created were invalidated retroactively by a block reorganization, which is another way of saying that the block including the value overflow transaction and all the blocks built on top of it were replaced.

该漏洞在CVE-2010-5139中详细介绍，并通过比特币核心0.3.11的软分叉进行了修复。 该交易及其创造的额外比特币被区块重组追溯性地使无效，这是另一种说法，即包含值溢出交易的区块以及建立在其上的所有区块都被替换。
====

==== Checking the Signature 检查签名

Perhaps((("signing and verification", "signature verification", id="SAVsigver07"))) the trickiest part of validating a transaction is the process of checking its signatures.
A transaction typically has at least one signature per input.
If there are multisig outputs being spent, there may be more than one.
As we learned in <<chapter_elliptic_curve_cryptography>>, the ECDSA signature algorithm requires the public key _P_, the signature hash _z_, and the signature (_r_,_s_).
Once these are known, the process of verifying the signature is pretty simple, as we already coded in <<chapter_elliptic_curve_cryptography>>:

也许((("signing and verification", "signature verification", id="SAVsigver07")))验证交易中最棘手的部分是检查其签名的过程。 一个交易通常至少有一个输入签名。 如果正在消费多重签名输出，可能会有更多。 正如我们在<<chapter_elliptic_curve_cryptography>>中学到的，ECDSA签名算法需要公钥 _P_，签名哈希 _z_ 和签名(_r_,_s_)。 一旦知道这些，验证签名的过程就相当简单，正如我们在<<chapter_elliptic_curve_cryptography>>中编写的：

[source,python]
----
include::code-ch07/examples.py[tag=example2]
----

SEC((("OP_CHECKSIG operation"))) public keys and DER signatures are in the stack when a command like `OP_CHECKSIG` is executed, making getting the public key and signature pretty straightforward (see <<chapter_script>>).
The hard part is getting the signature hash.
A naive way to do this would be to hash the transaction serialization as shown in <<a_signature_is_in_the_yellow_highlighted_part_or_the_scriptsig>>.
Unfortunately, we can't do that, since the signature is part of the ScriptSig and a signature can't sign itself.

SEC 当执行类似OP_CHECKSIG的命令时，公钥和DER签名在栈中，使得获取公钥和签名相当直接（请参见<<chapter_script>>）。 
困难的部分是获取签名哈希。 
一种简单的方法是将交易序列化并进行哈希，如<<a_signature_is_in_the_yellow_highlighted_part_or_the_scriptsig>>所示。 
不幸的是，我们不能这样做，因为签名是ScriptSig的一部分，而且签名不能签名自身。

[[a_signature_is_in_the_yellow_highlighted_part_or_the_scriptsig]]
.A signature is in the yellow highlighted part, or the ScriptSig 签名在黄色高亮部分，或者ScriptSig
image::images/prbc_0701.png[Validation Start]

Instead, we modify the transaction before signing it.
That is, we compute a different signature hash _for each input_.
The procedure is as follows.

相反，我们在签名交易之前对其进行修改。 
也就是说，我们为每个输入计算不同的签名哈希。 
程序如下。

===== Step 1: Empty all the ScriptSigs 第1步：清空所有ScriptSigs

The first step is to empty all the ScriptSigs when checking the signature (<<empty_each_inputs_scriptsig_in_yellow_highlighted_field>>).
The same procedure is used for creating the signature, except the ScriptSigs are usually already empty.

检查签名的第一步是清空所有ScriptSigs（<<empty_each_inputs_scriptsig_in_yellow_highlighted_field>>）。 创建签名的过程与此类似，不过ScriptSigs通常已经为空。

[[empty_each_inputs_scriptsig_in_yellow_highlighted_field]]
.Empty each input's ScriptSig (in yellow highlighted field, now 00)
image::images/prbc_0702.png[Validation Step 1]

Note that this example has only one input, so only that input's ScriptSig is emptied, but it's possible to have more than one input. In that case, each of those would be emptied.

注意，这个例子只有一个输入，所以只清空此输入的ScriptSig，但可能有多个输入。在这种情况下，每个输入都将被清空。

===== Step 2: Replace the ScriptSig of the input being signed with the previous ScriptPubKey 第2步：用以前的ScriptPubKey替换待签名的输入的ScriptSig

Each input points to a previous transaction output, which has a ScriptPubKey. Recall the diagram from <<chapter_script>>, shown again in <<scriptpubkey_and_scriptsig2>>.

每个输入都指向一个以前的交易输出，该输出具有ScriptPubKey。回想一下<<chapter_script>>中的图表，再次展示在<<scriptpubkey_and_scriptsig2>>。

[[scriptpubkey_and_scriptsig2]]
.Combining the ScriptPubKey and ScriptSig
image::images/prbc_0703.png[ScriptPubKey and ScriptSig]

We take the ScriptPubKey that the input is pointing to and put that in place of the empty ScriptSig (<<replace_the_scriptsig_yellow_highlighted_field_for_one_of_the_inputs_with_the_previous_scriptpubkey>>).
This may require a lookup on the blockchain, but in practice the signer already knows the ScriptPubKey, as the input is one where the signer has the private key.

我们取输入指向的ScriptPubKey，将其放在空ScriptSig的位置（<<replace_the_scriptsig_yellow_highlighted_field_for_one_of_the_inputs_with_the_previous_scriptpubkey>>）。 这可能需要在区块链上进行查找，但在实践中，签名者已经知道ScriptPubKey，因为输入是签名者有私钥的输入。

[[replace_the_scriptsig_yellow_highlighted_field_for_one_of_the_inputs_with_the_previous_scriptpubkey]]
.Replace the ScriptSig (yellow highlighted field) for one of the inputs with the previous ScriptPubKey
image::images/prbc_0704.png[Validation Step 2]

===== Step 3: Append the hash type 第3步：附加哈希类型

Last, we add a 4-byte((("SIGHASH_ALL"))) hash type to the end.
This is to specify what the signature is authorizing.
The signature can authorize this input to go with all the other inputs and outputs (`SIGHASH_ALL`), go with a specific output (`SIGHASH_SINGLE`), or go with any output whatsoever (`SIGHASH_NONE`).
The latter two have some theoretical use cases, but in practice, almost every transaction is signed with `SIGHASH_ALL`.
There's also a rarely used hash type called `SIGHASH_ANYONECANPAY` that can be combined with any of the previous three, which we won't get into here.
For `SIGHASH_ALL`, the final transaction must have the exact outputs that were signed or the input signature is invalid.

最后，我们在末尾添加一个4字节的哈希类型。 
这是为了指定签名授权的内容。 
签名可以授权此输入与其他所有输入和输出一起使用（`SIGHASH_ALL`），与特定输出一起使用（`SIGHASH_SINGLE`），或与任何输出一起使用（`SIGHASH_NONE`）。 
后两种在理论上有一些用例，但在实践中，几乎所有交易都是用 `SIGHASH_ALL` 签名的。 
还有一个很少使用的哈希类型 `SIGHASH_ANYONECANPAY`，可以与前三个中的任何一个结合使用，这里不详细介绍。 
对于 `SIGHASH_ALL`，最终交易必须具有签名时确切输出，否则输入签名无效。

The integer corresponding to `SIGHASH_ALL` is 1 and this has to be encoded in little-endian over 4 bytes, which makes the modified transaction look like <<append_the_hash_type_sighash_all_or_the_orange_01000000>>.

与SIGHASH_ALL对应的整数是1，需要用小端编码4个字节，这使得修改后的交易看起来像<<append_the_hash_type_sighash_all_or_the_orange_01000000>>。

[[append_the_hash_type_sighash_all_or_the_orange_01000000]]
.Append the hash type (SIGHASH_ALL), or the brown 01000000
image::images/prbc_0705.png[Validation Step 3]

The hash256 of this modified transaction is interpreted as a big-endian integer to produce _z_.
The code for converting the modified transaction to _z_ looks like this:

此修改后的交易的hash256被解释为一个大端整数以产生 _z_。 将修改后的交易转换为 _z_ 的代码如下：

[source,python]
----
include::code-ch07/examples.py[tag=example3]
----

Now that we have our _z_, we can take the public key in SEC format and the signature in DER format from the ScriptSig to verify the signature:

现在我们已经得到了我们的 _z_，可以从ScriptSig中取出SEC格式的公钥和DER格式的签名来验证签名：

[source,python]
----
include::code-ch07/examples.py[tag=example4]
----

We can code this transaction validation process into a method for `Tx`.
Thankfully, the Script engine can already handle signature verification (see <<chapter_script>>), so our task here is to glue everything together.
We need _z_, or the signature hash, to pass into the `evaluate` method and we need to combine the ScriptSig and ScriptPubKey.

我们可以将此交易验证过程编码为 `Tx` 的一个方法。幸运的是，脚本引擎已经可以处理签名验证（请参见 <<chapter_script>>），所以我们在这里的任务是将所有内容粘合在一起。我们需要 _z_，或者说是签名哈希，将其传递给 `evaluate` 方法，并且我们需要将 ScriptSig 和 ScriptPubKey 结合起来。

[NOTE]
.Quadratic Hashing 二次哈希
====
The((("quadratic hashing problem")))((("signing and verification", "signature hash")))((("signature hash")))((("hashes", "signature hash"))) signature hashing algorithm is inefficient and wasteful.
The _quadratic hashing problem_ states that time required to calculate the signature hashes increases quadratically with the number of inputs in a transaction.
Specifically, not only will the number of hash256 operations for calculating _z_ increase on a per-input basis, but in addition, the length of the transaction will increase, slowing down each hash256 operation because the entire signature hash will need to be calculated anew for each input.

签名哈希算法(((“quadratic hashing problem”)))(((“signing and verification”, “signature hash”)))(((“signature hash”)))(((“hashes”, “signature hash”)))是低效且浪费的。 二次哈希问题指出，计算签名哈希所需的时间与交易中输入的数量成二次方增长。 具体来说，不仅每个输入基础上计算 _z_ 的hash256操作次数会增加，而且交易的长度也会增加，因为每次都需要重新计算整个签名哈希，所以会降低每个hash256操作的效率。

This was particularly obvious with the biggest transaction mined to date:

这在迄今为止挖掘的最大交易中表现得尤为明显：

----
bb41a757f405890fb0f5856228e23b715702d714d59bf2b1feb70d8b2
b4e3e08
----

This transaction had 5,569 inputs and 1 output and took many miners over a minute to validate, as the signature hashes for the transaction were expensive to calculate.

这个交易有5,569个输入和1个输出，由于交易签名哈希计算代价高昂，许多矿工验证交易花费了超过一分钟的时间。

Segwit (<<chapter_segwit>>) fixes this with a different way of calculating the signature hash, which is specified in((("BIP (Bitcoin Improvement Proposals)", "BIP0143"))) BIP0143.((("", startref="Tvalid07")))((("", startref="SAVsigver07")))

Segwit（参见<<chapter_segwit>>）通过一种不同的计算签名哈希的方式解决了这个问题，这种方式在((("BIP (Bitcoin Improvement Proposals)", "BIP0143")))BIP0143中进行了规定。
====

include::code-ch07/answers.py[tag=exercise1,indent=0]

include::code-ch07/answers.py[tag=exercise2,indent=0]

==== Verifying the Entire Transaction 验证整个交易

Now((("transactions", "verifying entire transaction"))) that we can verify an input, the task of verifying the entire transaction is straightforward:

现在(((“transactions”, “verifying entire transaction”)))我们已经可以验证一个输入，验证整个交易的任务就很简单了：

[source,python]
----
class Tx:
...
include::code-ch07/tx.py[tag=source2]
----
<1> We make sure that we are not creating money. 我们确保不会创造货币。
<2> We make sure that each input has a correct ScriptSig. 我们确保每个输入都有正确的ScriptSig。

Note that a full node would verify more things, like checking for double-spends and checking some other consensus rules not discussed in this chapter (max sigops, size of ScriptSig, etc.), but this is good enough for our library.

请注意，完整节点会验证更多内容，例如检查双重支付和一些本章未讨论的其他共识规则（最大sigops，ScriptSig的大小等），但这对我们的库来说已经足够了。

=== Creating Transactions 创建交易

The((("transactions", "creating", id="Tcreate07"))) code to verify transactions will help quite a bit with creating transactions.
We can create transactions that fit the verification process.
Transactions we create will require the sum of the inputs to be greater than or equal to the sum of the outputs.
Similarly, transactions we create will require a ScriptSig that, when combined with the ScriptPubKey, will be valid.

验证交易的代码(((“transactions”, “creating”, id=“Tcreate07”)))将极大地帮助创建交易。 我们可以创建符合验证过程的交易。 我们创建的交易需要输入的总和大于或等于输出的总和。 同样，我们创建的交易需要一个ScriptSig，当与ScriptPubKey结合时，它是有效的。

To create a transaction, we need at least one output we've received.
That is, we need an output from the UTXO set whose ScriptPubKey we can unlock.
The vast majority of the time, we need one or more private keys corresponding to the public keys that are hashed in the ScriptPubKey.

要创建一个交易，我们至少需要一个收到的输出。 也就是说，我们需要一个来自UTXO集合的输出，其ScriptPubKey我们可以解锁。 在绝大多数情况下，我们需要一个或多个私钥，这些私钥对应于在ScriptPubKey中哈希的公钥。

The rest of this chapter will be concerned with creating a transaction whose inputs are locked by p2pkh ScriptPubKeys.

本章的其余部分将关注创建一个交易，其输入由p2pkh ScriptPubKey锁定。

==== Constructing the Transaction 构建交易

The construction of a transaction requires answering some basic questions:

构建交易需要回答一些基本问题：

1. Where do we want the bitcoins to go? 我们希望比特币去哪里？
2. What UTXOs can we spend? 我们可以花费哪些未花费的交易输出（UTXOs）？
3. How quickly do we want this transaction to get into the blockchain? 我们希望这笔交易多快进入区块链？

We'll be using testnet for this example, though this can easily be applied to mainnet.

我们将使用测试网作为示例，尽管这可以很容易地应用于主网。

The first question is about how much we want to pay whom.
We can pay one or more addresses.
In this example, we will pay 0.1 testnet bitcoins (tBTC) to `mnrVtF8DWjMu839VW3rBfgYaAfKk8983Xf`.

第一个问题是关于我们要支付多少钱给谁。 我们可以支付给一个或多个地址。 在这个例子中，我们将向 `mnrVtF8DWjMu839VW3rBfgYaAfKk8983Xf` 支付 0.1 个测试网比特币（tBTC）。

The second question is about what's in our wallet.
What do we have available to spend?
In this example, we have an output denoted by a transaction ID and output index:

第二个问题是关于我们的钱包里有什么。 我们有什么可以花费的？ 在这个例子中，我们有一个由交易ID和输出索引表示的输出：

----
0d6fe5213c0b3291f208cba8bfb59b7476dffacc4e5cb66f6eb20a080843a299:13
----

[role="pagebreak-before"]
When we view this output on a testnet((("block explorers"))) block explorer (<<utxo_that_were_spending>>), we can see that our output is worth 0.44 tBTC.

我们在测试网上查看这个输出（<<utxo_that_were_spending>>），可以看到我们的输出价值 0.44 tBTC。

[[utxo_that_were_spending]]
.UTXO that we're spending 我们正在花费的UTXO
image::images/prbc_0706.png[Transaction seen on the blockchain]

Since this is more than 0.1 tBTC, we'll want to send the rest back to ourselves.
Though it's generally bad privacy and security practice to reuse addresses, we'll send the bitcoins back to `mzx5YhAH9kNHtcN481u6WkjeHjYtVeKVh2` to make the transaction construction easier.

由于这超过了 0.1 tBTC，我们会想把剩下的部分退回给我们自己。 虽然重复使用地址通常是不良的隐私和安全做法，但为了简化交易构建，我们将比特币退回给 `mzx5YhAH9kNHtcN481u6WkjeHjYtVeKVh2`

.Why Reusing Addresses Is a Bad Idea 为什么重复使用地址是个坏主意
[WARNING]
====
Back((("addresses, reusing")))((("privacy issues, reusing addresses"))) in <<chapter_script>>, we went through how p2pk was inferior to p2pkh, in part because it was only protected by ECDSA.
p2pkh, on the other hand, is also protected by sha256 and ripemd160.
However, because the blockchain is public, once we spend from a ScriptPubKey corresponding to our address, we reveal our public key as part of the ScriptSig.
Once we've revealed that public key, sha256 and ripemd160 no longer protect us, as the attacker knows the public key and doesn't have to guess it.

我们在 <<脚本章节>> 中讨论了地址的重复使用，我们讲述了p2pk为什么比p2pkh差，部分原因是它只受到ECDSA的保护。 另一方面，p2pkh也受到sha256和ripemd160的保护。 然而，由于区块链是公开的，一旦我们花费了与我们的地址对应的ScriptPubKey，我们就会在ScriptSig中透露我们的公钥。 一旦我们透露了那个公钥，sha256和ripemd160就不再保护我们了，因为攻击者知道公钥，不必猜测。

((("discrete log problem")))As of this writing, we are still protected by the discrete log problem, which is unlikely to be broken any time soon.
It's important from a security perspective, however, to understand what we're protected by.

截至撰写本文时，我们仍然受到离散对数问题的保护，这不太可能很快被破解。 然而，从安全的角度了解我们所受到的保护是很重要的。

The other reason to not reuse addresses is for privacy.
Having a single address for all our transactions means that people can link our transactions together.
If, for example, we bought something private (say, medication to treat some disease we don't want others to know about) and spent another output with the same ScriptPubKey for a donation to some charity, the charity and the medication vendor could identify that we had done business with the other.

不重复使用地址的另一个原因是隐私。 拥有所有交易的单一地址意味着人们可以将我们的交易关联在一起。 例如，我们购买了某些私人东西（比如说，治疗某种我们不想让别人知道的疾病的药物）并且用相同的ScriptPubKey的另一个输出来捐赠给某个慈善机构，那么慈善机构和药品供应商可以发现我们曾经与对方做过生意。

Privacy leaks tend to become security holes over time.

隐私泄露往往会随着时间的推移变成安全漏洞。
====

The third question is really about fees.
If we want to get the transaction in the blockchain faster, we'll have to pay more fees; if we don't mind waiting, we can pay less.
In our case, we'll use 0.01 tBTC as our fee.

第三个问题实际上是与费用有关。 如果我们希望更快地将交易纳入区块链，我们就必须支付更多的费用；如果我们不介意等待，我们可以支付更少的费用。 在我们这个例子中，我们将使用 0.01 tBTC 作为我们的费用。

.Fee Estimation 费用估算
[NOTE]
====
Fee((("transactions", "transaction fees"))) estimation is done on a per-byte basis.
If your transaction is 600 bytes, it will have double the fees as a transaction that's 300 bytes.
This is because block space is limited and larger transactions take up more space.
This calculation has changed a bit since Segwit (see <<chapter_segwit>>), but the general principle still applies.
We want to pay enough on a per-byte basis so that miners are motivated to include our transaction as soon as possible.

费用估算是以每字节为基础进行的。 如果您的交易是600字节，那么它的费用将是300字节交易的两倍。 这是因为区块空间是有限的，较大的交易占用更多的空间。 自从Segwit（参见<<章节_segwit>>）以来，这个计算已经发生了一些变化，但基本原则仍然适用。 我们希望按每字节支付足够的费用，以便矿工们有动力尽快包含我们的交易。

When blocks aren't full, almost any amount above the default relay limit (1 satoshi/byte) is enough to get a transaction included.
When blocks are full, this is not an easy thing to estimate.
There are multiple ways to estimate fees, including:

当区块不满时，几乎任何高于默认中继限额（1 satoshi/字节）的金额都足以让交易被包含。 当区块满时，这个估算并不容易。 有多种估算费用的方法，包括：

* Looking at various fee levels and estimating the probability of inclusion based on past blocks and the mempools at the time 观察各种费用水平，根据过去的区块和当时的内存池估算包含的概率
* Looking at the current mempool and adding a fee that roughly corresponds to enough economic incentivization 观察当前内存池，并添加一个大致相当于足够经济激励的费用
* Going with some fixed fee 使用一些固定的费用

Many wallets use different strategies, and this is an active area of research.((("", startref="Tcreate07")))

许多钱包使用不同的策略，这是一个活跃的研究领域。((("", startref="Tcreate07")))
====

==== Making the Transaction 构建交易

We((("transactions", "combining to make"))) have a plan for a new transaction with one input and two outputs.
But first, let's look at some other tools we'll need.

我们(((“交易”，“组合构建”)))计划进行一次新的交易，包括一个输入和两个输出。 但首先，让我们看看我们需要的一些其他工具。

We need a way to take an address and get the 20-byte hash out of it.
This is the opposite of encoding an address, so we call the function `decode_base58`:

我们需要一种方法，可以通过地址提取出20字节的哈希。 这是地址编码的相反过程，所以我们称之为 decode_base58 函数：

[source,python]
----
include::code-ch07/helper.py[tag=source1]
----
<1> We get what number is encoded in this Base58 address. 我们获取这个Base58地址中编码的数字。
<2> Once we have the number, we convert it to big-endian bytes. 一旦我们有了这个数字，我们将其转换为大端字节。
<3> The first byte is the network prefix and the last 4 are the checksum.
The middle 20 are the actual 20-byte hash (aka hash160). 第一个字节是网络前缀，最后4个是校验和。 中间的20个字节是实际的20字节哈希（也称为hash160）。

We also need a way to convert the 20-byte hash to a ScriptPubKey.
We call this function `p2pkh_script` since we're converting the hash160 to a p2pkh:

我们还需要一种方法将20字节哈希转换为ScriptPubKey。 我们称这个函数为 p2pkh_script，因为我们正在将hash160转换为p2pkh：

[source,python]
----
include::code-ch07/script.py[tag=source1]
----

Note((("OP_DUP operation")))((("OP_HASH160 operation")))((("OP_EQUALVERIFY operation")))((("OP_CHECKSIG operation"))) that `0x76` is `OP_DUP`, `0xa9` is `OP_HASH160`, `h160` is a 20-byte element, `0x88` is `OP_EQUALVERIFY`, and `0xac` is `OP_CHECKSIG`.
This is the p2pkh ScriptPubKey command set from <<chapter_script>>.

注意 ((("OP_DUP operation")))((("OP_HASH160 operation")))((("OP_EQUALVERIFY operation")))((("OP_CHECKSIG operation"))) 0x76 是 OP_DUP，0xa9 是 OP_HASH160，h160 是一个20字节的元素，0x88 是 OP_EQUALVERIFY，0xac 是 OP_CHECKSIG。 这是从 <<章节_script>> 中得到的p2pkh ScriptPubKey命令集。

Given these tools, we can proceed to transaction creation:

有了这些工具，我们可以进行交易创建：

[source,pycon]
----
include::code-ch07/examples.py[tag=example5]
----
<1> The amount must be in satoshis; given there are 100,000,000 satoshis per BTC, we have to multiply and cast to an integer. 金额必须是 satoshis；考虑到每个BTC有100,000,000 satoshis，我们必须进行乘法和转换为整数。
<2> We have to designate which network to look up using the `testnet=True` pass:[<span class="keep-together">argument</span>]. 我们必须指定使用哪个网络，通过 testnet=True 参数。

We have created the actual transaction, but every ScriptSig in this transaction is currently empty. Filling it is where we turn next.

我们已经创建了实际的交易，但是这个交易中的每个ScriptSig目前都是空的。接下来我们将填充它。

==== Signing the Transaction 签名交易

Signing((("signing and verification", "signing process", id="SAVsign07")))((("transactions", "signing", id="Tsign07"))) the transaction could be tricky, but we know how to get the signature hash, _z_, from earlier in this chapter.
If we have the private key whose public key hash160s to the 20-byte hash in the ScriptPubKey, we can sign _z_ and produce the DER signature:

签名((("signing and verification", "signing process", id="SAVsign07")))((("transactions", "signing", id="Tsign07"))) 交易可能有些棘手，但我们在本章前面已经了解到如何获取签名散列值 _z_。 如果我们有私钥，其公钥散列160后得到ScriptPubKey中的20字节散列，我们可以对 _z_ 签名并生成DER签名：

[source,pycon]
----
include::code-ch07/examples.py[tag=example6]
----
<1> We only need to sign the first input—there's only one.
Multiple inputs would require us to sign each input with the right private key. 我们只需要对第一个输入进行签名 - 只有这一个。 多个输入将需要我们用正确的私钥对每个输入进行签名。
<2> The signature is actually a combination of the DER signature and the hash type, which is `SIGHASH_ALL` in our case. 签名实际上是DER签名和哈希类型的组合，在我们的情况下是SIGHASH_ALL。签名实际上是DER签名和哈希类型的组合，在我们的情况下是SIGHASH_ALL。
<3> The ScriptSig of a p2pkh has exactly two elements, as we saw in <<chapter_script>>: the signature and SEC format public key.  p2pkh的ScriptSig恰好有两个元素，如我们在<<chapter_script>>中所见：签名和SEC格式公钥。
<4> We only have one input that we need to sign, but if there were more, this process of creating the ScriptSig would need to be done for each input. 我们只需要对一个输入进行签名，但如果还有其他输入，则需要为每个输入创建ScriptSig。

include::code-ch07/answers.py[tag=exercise3,indent=0]

=== Creating Your Own Transactions on testnet 在testnet上创建自己的交易

To((("testnet"))) create your own transaction, get some coins for yourself.
To do that you'll need an address.
If you completed the last exercise in <<chapter_serialization>>, you should have your own testnet address and private key.
If you don't remember, here's how:

要创建自己的交易，首先要为自己获取一些硬币。 为此，你需要一个地址。 如果你完成了<<chapter_serialization>>中的最后一个练习，你应该有自己testnet地址和私钥。 如果你不记得，可以参考以下步骤：

[source,python]
----
include::code-ch07/examples.py[tag=example7]
----
<1> Please use a phrase other than `Jimmy Song secret`. 请使用除"Jimmy Song secret"以外的短语。

Once you have an address, you can get some coins from one of the testnet faucets that provide free testnet coins for testing purposes.
You can Google "testnet bitcoin faucet" to find one, or use one from the https://en.bitcoin.it/wiki/Testnet#Faucets[list on the wiki].
My website, https://faucet.programmingbitcoin.com[], is also updated to point to a testnet faucet that works.
Enter your new testnet address into any of these faucets to get some testnet coins.

一旦你有了地址，你就可以从提供免费测试币的测试网水龙头中获取一些硬币。你可以通过Google搜索"testnet bitcoin faucet"来找到一个，或者使用 https://en.bitcoin.it/wiki/Testnet#Faucets[wiki上的列表]中的一个。我的网站， https://faucet.programmingbitcoin.com[]，也更新为指向一个可用的测试网水龙头。 将你的新测试网地址输入到这些水龙头中的任何一个，以获取一些测试网硬币。

After receiving some coins, spend them using this library.
This is a big accomplishment for a budding Bitcoin developer, so please take some time to complete these exercises.((("", startref="Tsign07")))((("", startref="SAVsign07")))

在收到一些硬币后，使用这个库花费它们。这对于一个初出茅庐的比特币开发者来说是一个重大的成就，所以请花些时间完成这些练习。(((“”, startref=“Tsign07”)))(((“”, startref=“SAVsign07”)))

include::code-ch07/answers.py[tag=exercise4,indent=0]

include::code-ch07/answers.py[tag=exercise5,indent=0]

=== Conclusion 结论

We've successfully validated existing transactions on the blockchain, and you've also created your own transactions on testnet!
This is a major achievement, and you should be proud.

我们成功地验证了区块链上现有的交易，你也已经在测试网上创建了自己的交易！这是一个重大的成就，你应该为之感到骄傲。

The code we have so far will do p2pkh and p2pk.
In the next chapter, we turn to a more advanced smart contract, p2sh.

我们迄今为止的代码将完成p2pkh和p2pk。在下一章中，我们将转向更高级的智能合约，p2sh。
