[[chapter_p2sh]]

== Pay-to-Script Hash 支付脚本哈希

[.lead]
Up((("multisig (multiple signatures)", "benefits of"))) to this point in the book, we've been doing single-key transactions, or transactions with only a single private key per input.
What if we wanted something a little more complicated?
A company that has $100 million in bitcoin might not want the funds locked to a single private key: if that single key were lost or stolen, all funds would then be lost.
What can we do to reduce the risk of this single point of failure?

到目前为止，本书中我们一直在处理单钥交易，或者说每个输入只有一个私钥的交易。 如果我们想要更复杂一些的东西呢？ 拥有1000万美元比特币的公司可能不希望资金锁定在一个单一的私钥上：如果这个单一的密钥丢失或被盗，那么所有的资金都将丢失。 我们可以采取什么措施来减少这种单点故障的风险？

The solution is _multisig_, or multiple signatures.
This was built into Bitcoin from the beginning, but was clunky at first and so wasn't used.
As we'll discover later in this chapter, Satoshi probably didn't test multisig, as it has an off-by-one error (see <<off-by-one>>).
The bug has had to stay in the protocol because fixing it would require a hard fork.

解决方案是多重签名，或者说多个签名。 多重签名从比特币的开始就已经建立，但是一开始并不好用，所以并没有被使用。 正如我们将在本章后面发现的，中本聪可能没有测试多重签名，因为它有一个错误（参见<<off-by-one>>）。 由于修复此错误将需要硬分叉，因此该错误不得不保留在协议中。

[NOTE]
.Multiple Private Keys to a Single Aggregated Public Key 将多个私钥汇总到一个聚合公钥
====
It is possible to "split" a single private key into multiple private keys and use an interactive method to aggregate signatures without ever reconstructing the private key, but this is not a common practice.
Schnorr signatures((("Schnorr signatures"))) will make aggregating signatures easier and perhaps more common in the future.

将单个私钥"拆分"成多个私钥，并使用交互式方法在不重新构建私钥的情况下汇总签名是可能的，但这并不是一种常见做法。 Schnorr签名((("Schnorr signatures")))将使签名聚合更容易，也许在未来的某个时候会变得更常见。
====

=== Bare Multisig 简化多签名

Bare multisig((("multisig (multiple signatures)", "bare multisig", id="MSbare08")))((("bare multisig", id="baremulti08"))) was the first attempt at creating transaction outputs that require signatures from multiple parties.
The idea is to change from a single point of failure to something a little more resilient to hacks.

简化多签名(((“multisig (multiple signatures)”, “bare multisig”, id=“MSbare08”)))(((“bare multisig”, id=“baremulti08”)))是首次尝试创建需要多方签名的交易输出。这个想法是从单一故障点转变为更抗黑客攻击的方案。

To((("OP_CHECKMULTISIG operation", id="opcheck08"))) understand bare multisig, one must first understand the `OP_CHECKMULTISIG` opcode.
As discussed in <<chapter_script>>, Script has a lot of different opcodes.
`OP_CHECKMULTISIG` is one of them, at `0xae`.
The opcode pass:[<span class="keep-together">consumes</span>] a lot of elements from the stack and returns whether or not the required number of signatures are valid for a transaction input.

要了解简化多签名，首先要了解OP_CHECKMULTISIG指令。在<<chapter_script>>中讨论了脚本有很多不同的操作码。OP_CHECKMULTISIG是其中之一，位于0xae。该操作码消耗堆栈中的许多元素，并返回是否足够有效的签名数量以用于交易输入。

The transaction output is called "bare" multisig because it's a long ScriptPubKey.
<<bare_multisig_scriptpubkey>> shows what a ScriptPubKey for a 1-of-2 multisig looks like.

该交易输出称为“简化”多签名，因为其ScriptPubKey较长。<<bare_multisig_scriptpubkey>>展示了1-of-2多签名的ScriptPubKey的样子。

[[bare_multisig_scriptpubkey]]
.Bare multisig ScriptPubKey
image::images/prbc_0801.png[Bare multisig ScriptPubKey]

Among bare multisig ScriptPubKeys, this one is on the small end, and we can already see that it's long.
The ScriptPubKey for p2pkh is only 25 bytes, whereas this bare multisig is 101 bytes (though obviously, compressed SEC format would reduce it some), and this is a 1-of-2!
<<bare_multisig_scriptsig>> shows what the ScriptSig looks like.

在简化多签名ScriptPubKeys中，这个较小，我们已经可以看出它很长。对于p2pkh，ScriptPubKey只有25个字节，而此简化多签名为101个字节（尽管显然，压缩的SEC格式将减小一些），且这是1-of-2！<<bare_multisig_scriptsig>>展示了ScriptSig的样子。

[[bare_multisig_scriptsig]]
.Bare multisig ScriptSig
image::images/prbc_0802.png[Bare multisig ScriptSig]

We only need 1 signature for this 1-of-2 multisig, so this is relatively short; something like a 5-of-7 would require 5 DER signatures and would be a lot longer (360 bytes or so).
<<bare_multisig_combined_script>> shows how the ScriptSig and ScriptPubKey combine.

对于这个1-of-2多签名，我们只需要1个签名，所以这相对较短；像5-of-7这样的签名则需要5个DER签名，将更长（约360个字节）。<<bare_multisig_combined_script>>展示了ScriptSig和ScriptPubKey如何结合。

[[bare_multisig_combined_script]]
.Bare multisig combined script
image::images/prbc_0803.png[Bare multisig combined script]

I've generalized here to show what an __m__-of-__n__ bare multisig would look like (_m_ and _n_ can be anything from 1 to 20 inclusive, though the numerical opcodes only go((("OP_16 operation"))) up to `OP_16`; values of 17 to 20 would require `0112` to push a number like 18 to the stack).
The starting state looks like <<bare_multisig_start>>.

我在这里进行概括，以展示一个 __m__ -of- __n__ 简化多签名看起来是什么样子（_m_ 和 _n_ 可以从1到20（包含）的任何数字，尽管数值操作码只到OP_16；17到20的值需要0112将像18这样的数字推送到堆栈）。起始状态看起来像<<bare_multisig_start>>。

[[bare_multisig_start]]
.Bare multisig start
image::images/prbc_0804.png[Bare multisig start]

`OP_0` will((("OP_0 operation"))) push the number 0 to the stack (<<bare_multisig_step_1>>).

OP_0将((("OP_0 operation")))将数字0推送到堆栈（<<bare_multisig_step_1>>）。

[[bare_multisig_step_1]]
.Bare multisig step 1
image::images/prbc_0805.png[Bare multisig step 1]

The signatures are elements, so they'll be pushed directly to the stack (<<bare_multisig_step_2>>).

签名是元素，所以它们将直接推送到堆栈（<<bare_multisig_step_2>>）。

[[bare_multisig_step_2]]
.Bare multisig step 2
image::images/prbc_0806.png[Bare multisig step 2]

`OP_m` will push the number _m_ to the stack, the public keys will be pushed to the stack, and `OP_n` will push the number _n_ to the stack (<<bare_multisig_step_3>>).

`OP_m` 将数字 _m_ 推送到堆栈，公钥将被推送到堆栈，`OP_n` 将数字 _n_ 推送到堆栈（<<bare_multisig_step_3>>）。

[[bare_multisig_step_3]]
.Bare multisig step 3
image::images/prbc_0807.png[Bare multisig step 3]

At this point, `OP_CHECKMULTISIG` will consume __m__ + __n__ + 3 elements (see <<off-by-one>>) and push a 1 to the stack if _m_ of the signatures are valid for _m_ distinct public keys from the list of _n_ public keys; otherwise, it pushes a 0.
Assuming that the signatures are valid, the stack has a single 1, which validates the combined script (<<bare_multisig_end>>).

此时，OP_CHECKMULTISIG将消耗 __m__ + n + 3个元素（见<<off-by-one>>)，如果 _m_ 个签名对 _m_ 个独特的公钥有效，则将1推送到堆栈；否则，它将推送到0。假设签名有效，堆栈有一个单一的1，这验证了组合脚本（<<bare_multisig_end>>）。

[[bare_multisig_end]]
.Bare multisig end
image::images/prbc_0808.png[Bare multisig end]

[[off-by-one]]
[NOTE]
.OP_CHECKMULTISIG Off-by-One Bug OP_CHECKMULTISIG 的 off-by-one 错误
====
The stack elements consumed by `OP_CHECKMULTISIG` are supposed to be _m_, _m_ different signatures, _n_ and _n_ different pubkeys. The number of elements consumed should be 2 (_m_ and _n_ themselves) + _m_ (signatures) + _n_ (pubkeys).
Unfortunately, the opcode consumes one more element than the _m_ + _n_ + 2 elements that it's supposed to.
`OP_CHECKMULTISIG` consumes _m_ + _n_ + 3 elements, so an extra element is added (`OP_0` in our example) so as to not cause a failure.

OP_CHECKMULTISIG 应消耗的堆栈元素是 m， m 个不同的签名， n 和 n 个不同的公钥。消耗的元素数量应为 2（m 和 n 本身）+ m（签名）+ n（公钥）。 不幸的是，操作码消耗的元素比预期的 m + n + 2 个元素多一个。 OP_CHECKMULTISIG 消耗 m + n + 3 个元素，所以为了不引起失败，需要添加一个额外的元素（在我们的例子中为 OP_0）。

The opcode does nothing with that extra element, and that extra element can be anything. As a way to combat malleability, however, most nodes on the Bitcoin network will not relay the transaction unless the extra element is `OP_0`.
Note that if we had _m_ + _n_ + 2 elements, `OP_CHECKMULTISIG` would fail as there are not enough elements to be consumed and the combined script would fail, causing the transaction to be invalid.

操作码对这个额外元素不做任何处理，而这个额外元素可以是任何内容。然而，作为一种对抗可塑性的方法，比特币网络上的大多数节点在额外元素不是 OP_0 的情况下不会转发交易。 请注意，如果我们有 _m_ + _n_ + 2 个元素，OP_CHECKMULTISIG 将失败，因为可消耗的元素不足，组合脚本将失败，导致交易无效。

====

=== Coding OP_CHECKMULTISIG 编写 OP_CHECKMULTISIG

In an __m__-of-__n__ bare multisig, the stack contains _n_ as the top element, then _n_ pubkeys, then _m_, then _m_ signatures, and finally a filler item due to the off-by-one bug.
The code for `OP_CHECKMULTISIG` in _op.py_ is mostly written here:

在一个 __m__-of-__n__ 简化多签名中，堆栈包含 _n_ 作为顶部元素，然后是 _n_ 个公钥，接着是 _m_，然后是 _m_ 个签名，最后由于 off-by-one 错误而添加一个填充项。 `OP_CHECKMULTISIG` 在 _op.py_ 中的代码大部分在这里编写：

[source,python]
----
include::code-ch08/op.py[tag=source1]
----
<1> Each DER signature is assumed to be signed with `SIGHASH_ALL`. 每个DER签名都假定是用 `SIGHASH_ALL` 签名的。
<2> We take care of the off-by-one error by consuming the only remaining element of the stack and not doing anything with the element. 我们通过消耗堆栈中剩下的唯一元素来处理 off-by-one 错误，并且不对该元素执行任何操作。
<3> This is the part that you will need to code for the next exercise.((("", startref="opcheck08"))) 这是你需要在下一个练习中编写的部分。(((“”, startref=“opcheck08”)))

include::code-ch08/answers.py[tag=exercise1,indent=0]

=== Problems with Bare Multisig 简化多签名的问题

Bare multisig is a bit ugly, but it is functional.
It avoids the single point of failure by requiring _m_ of _n_ signatures to unlock a UTXO.
There is plenty of utility in making outputs multisig, especially if you're a business.
However, bare multisig suffers from a few problems:

简化多签名虽然有些丑陋，但是它是实用的。它通过需要 _m_ 个 _n_ 个签名来解锁一个 UTXO 来避免单一故障点。在输出上实现多签名有很多实用性，尤其是如果你是一家企业。然而，简化多签名存在一些问题：

. A bare multisig ScriptPubKey has many different public keys, and that makes the ScriptPubKey long.
Unlike p2pkh or even p2pk ScriptPubKeys, these are not easily communicated using voice or even text messages.

一个简化多签名的 ScriptPubKey 包含许多不同的公钥，这使得 ScriptPubKey 变得较长。与 p2pkh 或甚至是 p2pk ScriptPubKeys 不同，它们不容易通过语音或甚至是短信来沟通。

. Because the output is so long—5 to 20 times larger than a normal p2pkh output—it requires more resources for node software.
Nodes keep track of the UTXO set, and a big ScriptPubKey is more expensive to keep track of.
A large output is more expensive to keep in fast-access storage (like RAM).

由于输出非常长 —— 比正常的 p2pkh 输出长 5 到 20 倍——所以它需要节点软件更多的资源。节点跟踪 UTXO 集合，较大的 ScriptPubKey 更昂贵。较大的输出在快速访问存储（如 RAM）中更加昂贵。

. Because the ScriptPubKey can be so big, bare multisig can and has been abused.
The entire PDF of Satoshi's original whitepaper is encoded in this transaction in block 230009:

由于 ScriptPubKey 可能非常大，简化多签名可能会被滥用。在区块 230009 中，整个比特币创始人中本聪的原始白皮书 PDF 文件被编码在这个交易中：

+
----
54e48e5f5c656b26c3bca14a8c95aa583d07ebe84dde3b7dd4a78f4e4186e713
----
+
The creator of this transaction split up the whitepaper PDF into 64-byte chunks, which were then made into invalid uncompressed public keys.
The whitepaper was encoded into 947 1-of-3 bare multisig outputs.
These outputs are not spendable but have to be indexed in the UTXO sets of full nodes.
This is a tax every full node has to pay and is in that sense abusive.

这个交易的创建者将白皮书 PDF 分割成 64 字节的块，然后将这些块制作成无效的不压缩公钥。 白皮书被编码成 947 个 1-of-3 简化多签名输出。 这些输出无法花费，但必须在完整节点的 UTXO 集合中索引。 这是每个完整节点必须支付的税，从这个意义上说，这是滥用。

To mitigate these problems, pay-to-script-hash (p2sh) was born.((("", startref="baremulti08")))((("", startref="MSbare08")))

为了减轻这些问题，支付脚本哈希（p2sh）应运而生。(((“”, startref=“baremulti08”)))(((“”, startref=“MSbare08”)))

=== Pay-to-Script-Hash (p2sh) 支付脚本哈希（p2sh）

Pay-to-script-hash (p2sh)((("p2sh (pay-to-script-hash)", "operation of", id="p2shoper08")))((("multisig (multiple signatures)", "p2sh (pay-to-script-hash) operation", id="MSp2shoper08")))((("ScriptPubKeys", "p2sh (pay-to-script-hash)", id="Hp2sh08"))) is a general solution to the long address/ScriptPubKey problem.
More complicated ScriptPubKeys than bare multisig can easily be made, and they have the same problems as bare multisig.

支付脚本哈希（p2sh）是一种解决长地址/ScriptPubKey 问题的通用方法。比简化多签名更复杂的 ScriptPubKey 可以很容易地创建，并且它们具有与简化多签名相同的问题。

The solution that p2sh implements is to take the hash of some Script commands and then reveal the preimage Script commands later.
Pay-to-script-hash was introduced in 2011 to a lot of controversy.
There were multiple proposals, but as we'll see, p2sh is kludgy but works.

p2sh 实现的解决方案是取一些 Script 命令的哈希，然后稍后揭示预图像 Script 命令。支付脚本哈希在 2011 年引入时引起了很多争议。虽然有多个提议，但正如我们将看到的，p2sh虽然粗糙，但可以工作。

In p2sh, a special rule gets executed only when the pattern shown in <<pay_to_script_hash_pattern_that_executes_the_special_rule>> is encountered.

在 p2sh 中，当遇到 <<支付脚本哈希模式，执行特殊规则>> 中显示的模式时，才会执行特殊规则。

[[pay_to_script_hash_pattern_that_executes_the_special_rule]]
.Pay-to-script-hash pattern (p2sh) that executes the special rule 执行特殊规则的支付脚本哈希模式
image::images/prbc_0809.png[p2sh Pattern]

If((("RedeemScript"))) this exact command set ends with a 1 on the stack, then the RedeemScript (the top item in <<pay_to_script_hash_pattern_that_executes_the_special_rule>>) is parsed and then added to the Script command set.
This((("BIP (Bitcoin Improvement Proposals)", "BIP0016"))) special pattern was introduced in BIP0016, and Bitcoin software that implements BIP0016 (anything post 2011) checks for the pattern.
The RedeemScript does not add new Script commands for processing unless this _exact_ sequence is encountered and ends with a 1.

如果这个确切命令集以 1 结束，那么 RedeemScript（<<支付脚本哈希模式，执行特殊规则>> 中的顶部项）将被解析，然后添加到 Script 命令集中。这个特殊模式在 BIP0016 中引入，并且实现了 BIP0016（2011 年以后的所有内容）的比特币软件会检查此模式。除非遇到此 确切 顺序并以 1 结尾，否则 RedeemScript 不会添加新的 Script 命令进行处理。

If this sounds hacky, it is.
But before we get to that, let's look a little more closely at exactly how this plays out.

如果这听起来像是在作弊，那么确实如此。但在我们深入了解这个问题之前，让我们更仔细地看看这究竟是如何发生的。

Let's say we have a 2-of-2 multisig ScriptPubKey (<<pay_to_script_hash_p2sh_redeemscript>>).

假设我们有一个 2-of-2 多签名 ScriptPubKey（<<支付脚本哈希 p2sh RedeemScript>>）。

[[pay_to_script_hash_p2sh_redeemscript]]
.Pay-to-script-hash (p2sh) RedeemScript 支付脚本哈希（p2sh）RedeemScript
image::images/prbc_0810.png[p2sh RedeemScript]

This is a ScriptPubKey for a bare multisig.
What we need to do to convert this to p2sh is to take a hash of this script and keep the script handy for when we want to redeem it.
We call this the RedeemScript, because the script is only revealed during redemption.
We put the hash of the RedeemScript as the ScriptPubKey (<<pay_to_script_hash_p2sh_scriptpubkey>>).

这是一个简化多签名的 ScriptPubKey。要将此目标转换为 p2sh，我们需要对此脚本取哈希，并在需要赎回时保留脚本。我们称这个脚 本为 RedeemScript，因为脚本仅在赎回期间揭示。我们将 RedeemScript 的哈希作为 ScriptPubKey（<<支付脚本哈希 p2sh ScriptPubKey>>）。

[[pay_to_script_hash_p2sh_scriptpubkey]]
.Pay-to-script-hash (p2sh) ScriptPubKey 支付脚本哈希（p2sh）ScriptPubKey
image::images/prbc_0811.png[p2sh ScriptPubKey]

The hash digest here is the hash160 of the RedeemScript, or what was previously the ScriptPubKey.
We're locking the funds to the _hash_ of the RedeemScript, which needs to be revealed at unlock time.

这里的哈希摘要是对 RedeemScript 的 hash160，或者之前是 ScriptPubKey 的哈希。我们将资金锁定到 RedeemScript 的 哈希 上，该哈希在解锁时需要被揭示。

Creating the ScriptSig for a p2sh script involves not only revealing the RedeemScript, but also unlocking the RedeemScript.
At this point, you might be wondering where the RedeemScript is stored. It's not on the blockchain until actual redemption, so it must be stored by the creator of the p2sh address.
If the RedeemScript is lost and cannot be reconstructed, the funds are lost, so it's very important to keep track of it!

为 p2sh 脚本创建 ScriptSig 不仅涉及揭示 RedeemScript，还涉及解锁 RedeemScript。此时，您可能会想知道 RedeemScript 存储在哪里。实际赎回之前，它不在区块链上，所以必须由 p2sh 地址的创建者保存。如果 RedeemScript 丢失且无法重建，资金将丢失，因此跟踪它非常重要！

[WARNING]
.Importance of Keeping the RedeemScript 保持 RedeemScript 的重要性
====
If you are receiving to a p2sh address, be sure to store and back up the RedeemScript!
Better yet, make it easy to reconstruct!

如果你正在向 p2sh 地址接收，请务必存储并备份 RedeemScript！ 更好的是，让它易于重建！
2-of-2 多签名的 ScriptSig 看起来像 <<支付脚本哈希 p2sh ScriptSig>>。
====

The ScriptSig for the 2-of-2 multisig looks like <<pay_to_script_has_p2sh_scriptsig>>.

[[pay_to_script_has_p2sh_scriptsig]]
.Pay-to-script-hash (p2sh) ScriptSig
image::images/prbc_0812.png[p2sh ScriptSig]

This produces the combined script in <<p2sh_combined>>.

这会产生在 <<p2sh 组合>> 中的组合脚本。

[[p2sh_combined]]
.p2sh combined script
image::images/prbc_0813.png[p2sh Combined script]

As before, `OP_0` is there because of the `OP_CHECKMULTISIG` bug.
The key to understanding p2sh is the execution of the exact sequence shown in <<p2sh_pattern_that_executes_the_special_rule>>.

与之前一样，OP_0 在这里是因为 OP_CHECKMULTISIG 的错误。理解 p2sh 的关键是执行 <<p2sh 执行特殊规则的图案>> 中显示的确切序列。

[[p2sh_pattern_that_executes_the_special_rule]]
.p2sh pattern that executes the special rule
image::images/prbc_0814.png[p2sh Pattern]

Upon execution of this sequence, if the stack is left with a 1, the RedeemScript is inserted into the Script command set.
In other words, if we reveal a RedeemScript whose hash160 is the same as the hash160 in the ScriptPubKey, that RedeemScript acts like the ScriptPubKey instead.
We hash the script that locks the funds and put that into the blockchain instead of the script itself.
This is why we call this ScriptPubKey pay-to-script-_hash_.

执行此序列后，如果堆栈中留下 1，则将 RedeemScript 插入到 Script 命令集中。换句话说，如果我们揭示了一个哈希160 与 ScriptPubKey 中的哈希160 相同的 RedeemScript，那么该 RedeemScript 就会像 ScriptPubKey 一样起作用。我们将锁定资金的脚本哈希，并将此哈希放入区块链，而不是脚本本身。这就是为什么我们称这个 ScriptPubKey 为支付脚本-哈希。

Let's go through exactly how this works.
We start with the Script commands (<<p2sh_start>>).

让我们详细了解这是如何工作的。我们从 Script 命令（<<p2sh 开始>>）开始。

[[p2sh_start]]
.p2sh start
image::images/prbc_0815.png[p2sh start]

`OP_0` will push a 0 to the stack, and the two signatures and the RedeemScript will be pushed to the stack directly, leading to <<p2sh_step_1>>.

`OP_0` 将一个0压入栈中，两个签名和RedeemScript将直接压入栈中，导致 <<p2sh_step_1>>。

[[p2sh_step_1]]
.p2sh step 1
image::images/prbc_0816.png[p2sh step 1]

`OP_HASH160` will hash the RedeemScript, which will make the stack look like <<p2sh_step_2>>.

`OP_HASH160` 将对RedeemScript进行哈希处理，这将使栈看起来像 <<p2sh_step_2>>。

[[p2sh_step_2]]
.p2sh step 2
image::images/prbc_0817.png[p2sh step 2]

The 20-byte hash will be pushed to the stack (<<p2sh_step_3>>).

20字节的哈希将被推送到栈中（<<p2sh_step_3>>）。

[[p2sh_step_3]]
.p2sh step 3
image::images/prbc_0818.png[p2sh step 3]

And((("OP_EQUAL operation"))) finally, `OP_EQUAL` will compare the top two elements.
If the software checking this transaction is pre-BIP0016, we will end up with <<p2sh_end_if_evaluating_with_pre_bip0016_software>>.

最后，`OP_EQUAL` 将比较栈顶的两个元素。如果检查此交易的软件是 pre-BIP0016 版本，那么我们将得到 <<p2sh_end_if_evaluating_with_pre_bip0016_software>>。

[[p2sh_end_if_evaluating_with_pre_bip0016_software]]
.p2sh end if evaluating with pre-BIP0016 software
image::images/prbc_0819.png[p2sh pre-BIP0016 End]

This would end evaluation for pre-BIP0016 nodes and the result would be valid, assuming the hashes are equal.

这将结束 pre-BIP0016 节点的评估，假设哈希相等，结果将是有效的。

On the other hand, BIP0016 nodes, which as of this writing are the vast majority, will parse the RedeemScript as Script commands (<<p2sh_redeemscript>>).

另一方面，BIP0016 节点（截至目前，绝大多数节点）将把 RedeemScript 解析为脚本命令（<<p2sh_redeemscript>>）。

[[p2sh_redeemscript]]
.p2sh RedeemScript
image::images/prbc_0820.png[p2sh RedeemScript]

These go into the Script column as commands (<<p2sh_step_4>>).

这些命令将进入脚本列（<<p2sh_step_4>>）。

[[p2sh_step_4]]
.p2sh step 4
image::images/prbc_0821.png[p2sh step 4]

`OP_2` pushes((("OP_2 operation"))) a 2 to the stack, the pubkeys are also pushed, and a final `OP_2` pushes another 2 to the stack (<<p2sh_step_5>>).

OP_2 将一个 2 推送到栈中（“OP_2 操作”），公钥也被推送，最后的 OP_2 将另一个 2 推送到栈中（<<p2sh_step_5>>）。

[[p2sh_step_5]]
.p2sh step 5
image::images/prbc_0822.png[p2sh step 5]

`OP_CHECKMULTISIG` consumes _m_ + _n_ + 3 elements, which is the entire stack, and we end the same way we did for bare multisig (<<p2sh_end_for_post_bip_0016_software>>).

OP_CHECKMULTISIG 消耗 _m_ + _n_ + 3 个元素，这是整个栈，我们以与裸多签名相同的方式结束（<<p2sh_end_for_post_bip_0016_software>>）。

[[p2sh_end_for_post_bip_0016_software]]
.p2sh end for post-BIP0016 software
image::images/prbc_0823.png[p2sh End]

The RedeemScript substitution is a bit hacky, and there's special-cased code in Bitcoin software to handle this.
Why((("BIP (Bitcoin Improvement Proposals)", "BIP0012"))) wasn't something a lot less hacky and more intuitive chosen?
BIP0012 was a competing proposal at the time((("OP_EVAL operation"))) that used `OP_EVAL` and was considered more elegant.
A ScriptPubKey like <<op_eval_would_have_been_an_command_which_adds_additional_commands_based_on_the_top_element>> would have worked with BIP0012.

RedeemScript 的替换有点hacky，而且在比特币软件中有专门处理此问题的代码。 为什么没有选择更直观、更少hacky的方案呢？“BIP (比特币改进提案)”，“BIP0012” 是当时的一个竞争性提案，它使用了 OP_EVAL，被认为更优雅。一个像这样的 ScriptPubKey <<op_eval_would_have_been_an_command_which_adds_additional_commands_based_on_the_top_element>> 可以与 BIP0012 一起使用。

[[op_eval_would_have_been_an_command_which_adds_additional_commands_based_on_the_top_element]]
.OP_EVAL would have been a command that adds additional commands based on the top element  `OP_EVAL` 本质上是一个根据栈顶元素添加额外命令的指令。
image::images/prbc_0824.png[`OP_EVAL`]

`OP_EVAL` would have consumed the top element of the stack and interpreted that as Script commands to be put into the Script column.

`OP_EVAL` 将消耗栈顶元素，并将其解释为需要放入脚本列的脚本命令。

Unfortunately, this((("Turing completeness"))) more elegant solution comes with an unwanted side effect, namely Turing completeness.
Turing completeness is undesirable as it makes the security of a smart contract much harder to guarantee (see <<chapter_script>>).
Thus, the((("BIP (Bitcoin Improvement Proposals)", "BIP0016"))) more hacky but more secure option of special-casing was chosen in BIP0016.
BIP0016 (or p2sh) was implemented in 2011 and continues to be a part of the network today.((("", startref="p2shoper08")))((("", startref="MSp2shoper08")))


不幸的是，这个更优雅的解决方案附带了一个不希望的效果，即图灵完备性。图灵完备性是不希望的，因为它使得智能合约的安全性更难以保证（参见 <<chapter_script>>）。因此，在 BIP0016 中选择了更hacky但更安全的特殊案例处理方法。BIP0016（或p2sh）在2011年实施，并一直作为网络的一部分至今。((("", startref="p2shoper08")))((("", startref="MSp2shoper08")))

=== Coding p2sh 编码 p2sh

The((("p2sh (pay-to-script-hash)", "coding", id="p2shcode08")))((("multisig (multiple signatures)", "p2sh (pay-to-script-hash) coding", id="MSp2shcode08")))((("OP_HASH160 operation"))) special pattern of RedeemScript, `OP_HASH160`, hash160, and `OP_EQUAL` needs handling.
The `evaluate` method in _script.py_ is where we handle the special case:

特殊的 RedeemScript 模式，OP_HASH160，hash160 和 OP_EQUAL 需要处理。在 script.py 中的 evaluate 方法是我们处理特殊情况的地方：

[source,python]
----
class Script:
...
    def evaluate(self, z):
...
        while len(commands) > 0:
            command = commands.pop(0)
            if type(command) == int:
...
include::code-ch08/script.py[tag=source1]
----
<1> `0xa9` is `OP_HASH160`, `0x87` is `OP_EQUAL`.
We're checking that the next three commands conform to the BIP0016 special pattern. 0xa9 是 OP_HASH160，0x87 是 OP_EQUAL。我们检查接下来的三个命令是否符合 BIP0016 的特殊模式。 
<2> We know that this is `OP_HASH160`, so we just pop it off.
Similarly, we know the next command is the 20-byte hash value and the third command is `OP_EQUAL`, which is what we tested for in the `if` statement above it. 我们知道这是 OP_HASH160，所以我们将其弹出。 同样，我们知道下一个命令是20字节的哈希值，第三个命令是 OP_EQUAL，这是我们在上述 if 语句中测试的。
<3> We run the `OP_HASH160`, 20-byte hash push to the stack, and `OP_EQUAL` as normal. 我们运行 OP_HASH160，将20字节的哈希值推送到栈，以及 OP_EQUAL 作为正常操作。
<4> There should be a 1 remaining, which is what `op_verify` checks for (`OP_VERIFY` consumes one element and does not put anything back). 应该剩下1，这是 op_verify 检查的内容（OP_VERIFY 消耗一个元素，不返回任何内容）。
<5> Because we want to parse the RedeemScript, we need to prepend the length. 因为我们想要解析 RedeemScript，所以我们需要预添加长度。 
<6> We extend the command set with the parsed commands from the RedeemScript. 我们用从 RedeemScript 解析的命令扩展命令集。


==== More Complicated Scripts 更复杂的脚本

The((("OP_PUSHDATA2 operation"))) nice thing about p2sh is that the RedeemScript can be as long as the largest single element from `OP_PUSHDATA2`, which is 520 bytes.
Multisig is just one possibility.
You can have scripts that define more complicated logic, like "2 of 3 of these keys or 5 of 7 of these other keys."
The main feature of p2sh is that it's flexible and at the same time reduces the UTXO set size by pushing the burden of storing part of the script back to the user.

p2sh 的一个很好的地方是，RedeemScript 可以像 OP_PUSHDATA2 中的最大单一元素一样长，长达520字节。多签名只是其中一个可能性。您可以拥有定义更复杂逻辑的脚本，例如“这些密钥中的2个或这些其他密钥中的5个”。p2sh 的主要特点是它灵活，同时通过将部分脚本的存储负担推回给用户，减少了 UTXO 集的大小。

In <<chapter_segwit>>, p2sh is also used to make Segwit backward compatible.

在 <<chapter_segwit>> 中，p2sh 也被用于使 Segwit 向后兼容。

==== Addresses 地址

To compute p2sh addresses, we use a process similar to how we compute p2pkh addresses.
The hash160 is prepended with a prefix byte and appended with a checksum.

为了计算 p2sh 地址，我们使用类似于我们计算 p2pkh 地址的过程。哈希160的前面加上一个前缀字节，后面加上一个校验和。

Mainnet p2sh uses the `0x05` byte, which causes addresses to start with a `3` in Base58, while testnet p2sh uses the `0xc4` byte to cause addresses to start with a `2`.
We can calculate the address using the `encode_base58_checksum` function from _helper.py_:((("", startref="p2shcode08")))

主网 p2sh 使用 0x05 字节，导致地址在 Base58 中以 3 开头，而测试网 p2sh 使用 0xc4 字节使地址以 2 开头。我们可以使用 helper.py 中的 encode_base58_checksum 函数计算地址：(((“”, startref=“p2shcode08”)))

[source,pycon]
----
include::code-ch08/examples.py[tag=example1]
----

include::code-ch08/answers.py[tag=exercise2,indent=0]

include::code-ch08/answers.py[tag=exercise3,indent=0]

==== p2sh Signature Verification p2sh 签名验证

As((("p2sh (pay-to-script-hash)", "signature verification", id="p2shsignver08"))) with p2pkh, one of the tricky aspects of p2sh is verifying the signatures. p2sh signature verification is different from the p2pkh process covered in <<chapter_tx>>.

与 p2pkh 类似，p2sh 的一个棘手的问题是验证签名。p2sh 签名验证与 <<chapter_tx>> 中提到的 p2pkh 过程不同。

Unlike with p2pkh, where there's only one signature and one public key, we have some number of pubkeys (in SEC format in the RedeemScript) and some equal or smaller number of signatures (in DER format in the ScriptSig).
Thankfully, the signatures have to be in the same order as the pubkeys or the signatures are not considered valid.

与 p2pkh 不同，这里不仅有一个签名和一个公钥，我们有一些公钥（在 RedeemScript 中的 SEC 格式）和相等或更小的签名数量（在 ScriptSig 中的 DER 格式）。幸运的是，签名必须与公钥的顺序相同，否则签名将被视为无效。

Once we have a particular signature and public key, we only need the signature hash, or _z_, to figure out whether the signature is valid (<<validation_of_p2sh_inputs>>).

一旦我们有一个特定的签名和公钥，我们只需要签名哈希，或者 _z_，就可以确定签名是否有效（<<validation_of_p2sh_inputs>>）。

[[validation_of_p2sh_inputs]]
.Validation of p2sh inputs
image::images/prbc_0825.png[Validation Start]

As with p2pkh, finding the signature hash is the most difficult part of the p2sh signature validation process. We'll now proceed to cover this in detail.

与 p2pkh 类似，找到签名哈希是 p2sh 签名验证过程最困难的部分。我们将详细讲解此步骤。

===== Step 1: Empty all the ScriptSigs 第1步：清空所有 ScriptSigs

The first step is to empty all the ScriptSigs when checking the signature (<<empty_each_inputs_scriptsig>>).
The same procedure is used for creating the signature.

第一步是在检查签名时清空所有 ScriptSigs（<<empty_each_inputs_scriptsig>>）。 创建签名的过程中使用相同的程序。

[[empty_each_inputs_scriptsig]]
.Empty each input's ScriptSig
image::images/prbc_0826.png[Validation Step 1]

===== Step 2: Replace the ScriptSig of the p2sh input being signed with the RedeemScript 第2步：用 RedeemScript 替换正在签名的 p2sh 输入的 ScriptSig

Each p2sh input has a RedeemScript.
We take the RedeemScript and put that in place of the empty ScriptSig (<<replace_the_scriptsig_of_the_input_were_checking_with_the_redeemscript>>).
This is different from p2pkh in that it's not the ScriptPubKey.

每个 p2sh 输入都有一个 RedeemScript。 我们取出 RedeemScript，将其替换为空的 ScriptSig（<<replace_the_scriptsig_of_the_input_were_checking_with_the_redeemscript>>）。 这与 p2pkh 不同，它不是 ScriptPubKey。

[[replace_the_scriptsig_of_the_input_were_checking_with_the_redeemscript]]
.Replace the ScriptSig of the input we're checking with the RedeemScript 用 RedeemScript 替换我们正在检查的输入的 ScriptSig
image::images/prbc_0827.png[Validation Step 2]

===== Step 3: Append the hash type 第3步：附加哈希类型

Last, we add a 4-byte hash type to the end.
This is the same as in p2pkh. The integer corresponding to `SIGHASH_ALL` is 1 and this has to be encoded in little-endian over 4 bytes, which makes the transaction look like <<append_the_hash_type_sighash_all_or_the_blue_part_at_the_end>>.

最后，我们在末尾添加一个4字节的哈希类型。 这与 p2pkh 中的操作相同。SIGHASH_ALL 对应的整数为1，需要用小端编码将其编码为4个字节，这会使事务看起来像 <<append_the_hash_type_sighash_all_or_the_blue_part_at_the_end>>。

[[append_the_hash_type_sighash_all_or_the_blue_part_at_the_end]]
.Append the hash type (SIGHASH_ALL), 01000000
image::images/prbc_0828.png[Validation Step 3]

The hash256 of this interpreted as a big-endian integer is our _z_.
The code for getting our signature hash looks like this:

将这个哈希256作为大端整数解析为我们需要的 _z_。 我们获取签名哈希的代码如下：

[source,python]
----
include::code-ch08/examples.py[tag=example2]
----

Now that we have our _z_, we can grab the SEC public key and DER signature from the ScriptSig and RedeemScript  (<<der_and_sec_within_the_p2sh_scriptsig_and_redeemscript>>).

现在我们有了 _z_，可以从 ScriptSig 和 RedeemScript 中提取 SEC 公钥和 DER 签名（<<der_and_sec_within_the_p2sh_scriptsig_and_redeemscript>>）。

[[der_and_sec_within_the_p2sh_scriptsig_and_redeemscript]]
.DER signature and SEC pubkey within the p2sh ScriptSig and RedeemScript
image::images/prbc_0829.png[DER and SEC]

We can now validate the signature:

现在我们可以验证签名：

[source,python]
----
include::code-ch08/examples.py[tag=example3]
----
<1> `z` is from the code on page 185. `z` 来自第185页的代码。

We've verified one of the two signatures that are required to unlock this p2sh pass:[<span class="keep-together">multisig</span>].((("", startref="p2shsignver08")))((("", startref="MSp2shcode08")))((("", startref="Hp2sh08")))

我们已经验证了需要解锁此 p2sh 通行证的两个签名中的一个：[multisig].(((“”, startref=“p2shsignver08”)))(((“”, startref=“MSp2shcode08”)))(((“”, startref=“Hp2sh08”)))

include::code-ch08/answers.py[tag=exercise4,indent=0]

include::code-ch08/answers.py[tag=exercise5,indent=0]

=== Conclusion 结论

In this chapter we learned how p2sh ScriptPubKeys are created and how they're redeemed.
We've covered transactions for the last four chapters; we now turn to how they are grouped in blocks.

在本章中，我们了解了如何创建 p2sh ScriptPubKeys 以及如何兑换它们。 我们涵盖了最后四章中的交易；现在我们转向它们如何在区块中分组。
